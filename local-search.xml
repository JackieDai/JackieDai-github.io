<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>正则表达式入门</title>
    <link href="/2024/01/08/006swift/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/"/>
    <url>/2024/01/08/006swift/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="simple-regExp"><a href="#simple-regExp" class="headerlink" title="simple_regExp"></a>simple_regExp</h1><p><a href="https://github.com/qdlaoyao/js-regex-mini-book">文章参考链接</a><br><a href="https://github.com/JackieDai/simple_regExp">Demo链接</a></p><blockquote><p>正则表达式（Regular Expression，简称为RegExp或Regex）是一种强大而灵活的文本模式匹配工具。它是由一系列字符和特殊符号组成的字符串，用于描述和匹配一系列符合某种规律的字符串。正则表达式通常用于字符串的搜索、匹配、替换和提取操作，是处理文本的强大工具。</p><p>正则表达式的一些基本概念和元字符包括：</p><ol><li><p><strong>字符字面量：</strong> 普通字符表示它们自身，例如字母、数字、标点符号等。</p></li><li><p><strong>特殊字符：</strong> 一些字符具有特殊的含义，如 <code>.</code>、<code>*</code>、<code>+</code>、<code>?</code>、<code>|</code> 等，称为元字符，它们在正则表达式中有特定的作用。</p></li><li><p><strong>字符类：</strong> 用 <code>[]</code> 表示，匹配方括号中的任意一个字符。</p><ul><li><code>[aeiou]</code> 匹配任意一个元音字母。</li></ul></li><li><p><strong>范围：</strong> 在字符类中使用 <code>-</code> 表示范围，例如 <code>[0-9]</code> 表示匹配任意一个数字。</p></li><li><p><strong>量词：</strong> 用于指定匹配字符的数量，如 <code>*</code>（零次或多次）、<code>+</code>（一次或多次）、<code>?</code>（零次或一次）、<code>&#123;n&#125;</code>（恰好n次）等。</p><ul><li><code>a*</code> 匹配零个或多个连续的字母 “a”。</li></ul></li><li><p><strong>转义字符：</strong> 有些字符在正则表达式中有特殊含义，如果要匹配它们本身，需要使用反斜杠 <code>\</code> 进行转义。</p><ul><li><code>\.</code> 匹配点号字符。</li></ul></li><li><p><strong>分组：</strong> 使用 <code>()</code> 可以将一组字符看作一个整体，用于控制量词的作用范围。</p><ul><li><code>(ab)+</code> 匹配 “ab”、”abab”、”ababab” 等。</li></ul></li></ol><p>正则表达式是一种强大的工具，但由于其灵活性和复杂性，有时可能比较晦涩难懂。熟练掌握正则表达式可以在文本处理和搜索中提供高效而灵活的解决方案。</p></blockquote><h2 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h2><h3 id="横向匹配-m-n-连续出现最少-m-次，最多-n-次"><a href="#横向匹配-m-n-连续出现最少-m-次，最多-n-次" class="headerlink" title="横向匹配 {m,n}  连续出现最少 m 次，最多 n 次"></a>横向匹配 <code>&#123;m,n&#125;</code>  连续出现最少 m 次，最多 n 次</h3><blockquote><p> 横向模糊指的是，一个正则可匹配的字符串的长度不是固定的，可以是多种情况的。</p><p> 其实现的方式是使用量词。譬如 {m,n}，表示<strong>连续出现</strong>最少 m 次，最多 n 次。</p><p> 比如正则 “ab{2,5}c” 表示匹配这样一个字符串:第一个字符是 “a”，接下来是 2 到 5 个字符 “b”，最后是字符 “c”</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> config: <span class="hljs-type">RegExpConfig</span> <span class="hljs-operator">=</span> .<span class="hljs-keyword">init</span>(<br>    pattern: <span class="hljs-string">&quot;ab&#123;2,5&#125;c&quot;</span>,<br>    inputString: <span class="hljs-string">&quot;abc abbc abbbc abbbbc abbbbbc abbbbbbc&quot;</span><br>)<br><br><span class="hljs-keyword">let</span> result <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;abbc&quot;</span>, <span class="hljs-string">&quot;abbbc&quot;</span>, <span class="hljs-string">&quot;abbbbc&quot;</span>, <span class="hljs-string">&quot;abbbbbc&quot;</span>]<br><span class="hljs-type">XCTAssertEqual</span>(config.match_result_detail, result)<br></code></pre></td></tr></table></figure><h3 id="纵向匹配-abc-字符-“a”、”b”、”c”-中的任何一个"><a href="#纵向匹配-abc-字符-“a”、”b”、”c”-中的任何一个" class="headerlink" title="纵向匹配 [abc] &#x3D;&#x3D; 字符 “a”、”b”、”c” 中的任何一个"></a>纵向匹配 <code>[abc]</code> &#x3D;&#x3D; 字符 “a”、”b”、”c” 中的任何一个</h3><blockquote><p>纵向模糊指的是，一个正则匹配的字符串，具体到某一位字符时，它可以不是某个确定的字符，可以有多种可能。</p><p>其实现的方式是使用字符组。譬如 [abc]，表示该字符是可以字符 “a”、”b”、”c” 中的任何一个。比如 “a[123]b” 可以匹配如下三种字符串： “a1b”、”a2b”、”a3b”。</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> config: <span class="hljs-type">RegExpConfig</span> <span class="hljs-operator">=</span> .<span class="hljs-keyword">init</span>(<br>    pattern: <span class="hljs-string">&quot;a[123]b&quot;</span>,<br>    inputString: <span class="hljs-string">&quot;a0b a1b a2b a3b a4b&quot;</span><br>)<br><span class="hljs-keyword">let</span> result <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;a1b&quot;</span>, <span class="hljs-string">&quot;a2b&quot;</span>, <span class="hljs-string">&quot;a3b&quot;</span>]<br><span class="hljs-type">XCTAssertEqual</span>(config.match_result_detail, result)<br></code></pre></td></tr></table></figure><h2 id="字符组"><a href="#字符组" class="headerlink" title="字符组"></a>字符组</h2><blockquote><p>字符组（字符类），但只是其中一个字符。</p><p>例如 [abc]，表示匹配一个字符，它可以是 “a”、”b”、”c” 之一</p></blockquote><h3 id="范围表示法"><a href="#范围表示法" class="headerlink" title="- 范围表示法"></a><code>-</code> 范围表示法</h3><blockquote><p>“12345678900abcdefghijklmnopqistuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ”</p><p> 匹配出上述字符串中 1-6， a-f, A-F 的字符</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// let pattern = &quot;[123456abcdefABCDEF]&quot;  这种写法 太low, 可以通过 连字符“-” 来连接</span><br><span class="hljs-keyword">let</span> pattern <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[1-6a-fA-F]&quot;</span><br><br><span class="hljs-keyword">let</span> config: <span class="hljs-type">RegExpConfig</span> <span class="hljs-operator">=</span> .<span class="hljs-keyword">init</span>(<br>    pattern: pattern,<br>    inputString: <span class="hljs-string">&quot;12345678900abcdefghijklmnopqistuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><br>)<br><br><span class="hljs-keyword">let</span> r <span class="hljs-operator">=</span> [<br>    <span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>,<span class="hljs-string">&quot;5&quot;</span>,<span class="hljs-string">&quot;6&quot;</span>,<br>    <span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;d&quot;</span>,<span class="hljs-string">&quot;e&quot;</span>,<span class="hljs-string">&quot;f&quot;</span>,<br>    <span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;D&quot;</span>,<span class="hljs-string">&quot;E&quot;</span>,<span class="hljs-string">&quot;F&quot;</span><br>]<br><br><span class="hljs-comment">//        XCTAssertTrue(config.can_match)</span><br><span class="hljs-type">XCTAssertEqual</span>(config.match_result_detail, r)<br></code></pre></td></tr></table></figure><p>那么要匹配 “a”、”-“、”z” 这三者中任意一个字符，该怎么做呢？</p><p>不能写成 [a-z]，因为其表示小写字符中的任何一个字符。 可以写成如下的方式：[-az] 或 [az-] 或 [a-z]</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> pattern <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[-za]&quot;</span><br><br><span class="hljs-keyword">let</span> inputString <span class="hljs-operator">=</span> <span class="hljs-string">&quot;-12345678900abcdefghijklmnopqis-tuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><br><br><span class="hljs-keyword">let</span> result <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;z&quot;</span>]<br><span class="hljs-keyword">let</span> config: <span class="hljs-type">RegExpConfig</span> <span class="hljs-operator">=</span> .<span class="hljs-keyword">init</span>(pattern: pattern, inputString: inputString)<br><span class="hljs-type">XCTAssertEqual</span>(config.match_result_detail, result)<br></code></pre></td></tr></table></figure><h3 id="脱字符"><a href="#脱字符" class="headerlink" title="^ 脱字符"></a><code>^</code> 脱字符</h3><p>  在正则表达式中，<code>^</code> 符号有两个不同的用途，具体取决于它出现的位置：</p><ol><li><p><strong>在字符串的开始位置（脱字符）：</strong> 当 <code>^</code> 出现在正则表达式的开头时，它表示匹配字符串的开始位置。例如，正则表达式 <code>^abc</code> 将匹配以 “abc” 开始的字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs regex">^abc<br></code></pre></td></tr></table></figure><ul><li>匹配：”abc123”, “abcdef”, 等等。</li><li>不匹配：”123abc”, “xyzabc”, 等等。</li></ul></li><li><p><strong>在字符集([])内的位置：</strong> 当 <code>^</code> 出现在字符集的开头时，它表示对字符集进行否定操作，即匹配除了列出的字符之外的任何字符。例如，正则表达式 <code>[^0-9]</code> 将匹配任何非数字字符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs regex">[^0-9]<br></code></pre></td></tr></table></figure><ul><li>匹配：”a”, “X”, “$”, 等等。</li><li>不匹配：”1”, “9”, “0”, 等等。</li></ul></li></ol><p>总之，<code>^</code> 的含义取决于它在正则表达式中的位置。在开头表示字符串的开始，而在字符集内表示否定。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> pattern <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[^abcd]&quot;</span><br><span class="hljs-keyword">let</span> inputString <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1234abcdABCD&quot;</span><br><span class="hljs-keyword">let</span> config <span class="hljs-operator">=</span> <span class="hljs-type">RegExpConfig</span>(pattern: pattern, inputString: inputString)<br><span class="hljs-comment">//        XCTAssertTrue(config.can_match)</span><br><span class="hljs-keyword">let</span> r <span class="hljs-operator">=</span> [<br>    <span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>,<br>    <span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;D&quot;</span><br>]<br><span class="hljs-type">XCTAssertEqual</span>(config.match_result_detail, r)<br></code></pre></td></tr></table></figure><h3 id="d-0-9"><a href="#d-0-9" class="headerlink" title="\d  &#x3D;&#x3D; [0-9]"></a><code>\d</code>  &#x3D;&#x3D; <code>[0-9]</code></h3><h3 id="D-0-9"><a href="#D-0-9" class="headerlink" title="\D  &#x3D;&#x3D; [^0-9]"></a><code>\D</code>  &#x3D;&#x3D; <code>[^0-9]</code></h3><h3 id="w-0-9a-zA-Z-数字、大小写字母和下划线"><a href="#w-0-9a-zA-Z-数字、大小写字母和下划线" class="headerlink" title="\w  &#x3D;&#x3D; [0-9a-zA-Z_]   数字、大小写字母和下划线"></a><code>\w</code>  &#x3D;&#x3D; [0-9a-zA-Z_]   数字、大小写字母和下划线</h3><h3 id="W-0-9a-zA-Z-不是-数字、大小写字母和下划线"><a href="#W-0-9a-zA-Z-不是-数字、大小写字母和下划线" class="headerlink" title="\W  &#x3D;&#x3D; [^0-9a-zA-Z_]  不是 数字、大小写字母和下划线"></a><code>\W</code>  &#x3D;&#x3D; <code>[^0-9a-zA-Z_]</code>  不是 数字、大小写字母和下划线</h3><h3 id="s-表示空白符"><a href="#s-表示空白符" class="headerlink" title="\s  表示空白符"></a><code>\s</code>  表示空白符</h3><h3 id="S-非空白符"><a href="#S-非空白符" class="headerlink" title="\S  非空白符"></a><code>\S</code>  非空白符</h3><h3 id="通配符"><a href="#通配符" class="headerlink" title=".  通配符"></a><code>.</code>  通配符</h3><blockquote><p>在正则表达式中，<code>.</code> <u>是一个特殊的元字符，表示匹配除换行符 <code>\n</code> 之外的任意单个字符</u>。它是一个通配符，可以用来匹配任何字符，包括字母、数字、标点符号等。</p><p>下面是一些关于<code>.</code>的用法示例：</p><ol><li><p><strong>匹配任意字符：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs regex">a.b<br></code></pre></td></tr></table></figure><ul><li>匹配：”aab”, “abb”, “acb”, “a1b”, 等等。</li><li>不匹配：”abc”, “a\nb”, 等等。</li></ul></li><li><p><strong>使用<code>.</code>匹配特定数量的字符：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs regex">..t<br></code></pre></td></tr></table></figure><ul><li>匹配：”cat”, “bat”, “$$t”, 等等。</li><li>不匹配：”at”, “t”, 等等。</li></ul></li><li><p><strong>非贪婪匹配：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs regex">.*?<br></code></pre></td></tr></table></figure><p>这个例子中，<code>*</code> 是一个量词，表示匹配前面的字符零次或更多次，而 <code>?</code> 是用来实现非贪婪匹配的，表示匹配尽量少的字符。</p></li><li><p><strong>匹配任意字符，包括换行符：</strong><br>在一些正则表达式引擎中，可以使用 <code>.</code> 加上相关标记（例如 <code>(?s)</code>）来匹配包括换行符在内的任意字符。</p></li></ol><p>这些都是关于<code>.</code>在正则表达式中的一些基本用法。在实际使用时，要根据具体的需求选择合适的模式。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs swift">config <span class="hljs-operator">=</span> .<span class="hljs-keyword">init</span>(<br>    pattern: <span class="hljs-string">&quot;.&quot;</span>,<br>    inputString: <span class="hljs-string">&quot;!@#$%^&amp;*()e4<span class="hljs-subst">\n</span>&quot;</span><br>)<br><br><span class="hljs-keyword">let</span> r <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;!&quot;</span>,<span class="hljs-string">&quot;@&quot;</span>,<span class="hljs-string">&quot;#&quot;</span>,<span class="hljs-string">&quot;$&quot;</span>,<span class="hljs-string">&quot;%&quot;</span>,<span class="hljs-string">&quot;^&quot;</span>,<span class="hljs-string">&quot;&amp;&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>,<span class="hljs-string">&quot;(&quot;</span>,<span class="hljs-string">&quot;)&quot;</span>,<span class="hljs-string">&quot;e&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>,<span class="hljs-string">&quot;<span class="hljs-subst">\n</span>&quot;</span>]<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> XCTAssertEqual failed: (&quot;[&quot;!&quot;, &quot;@&quot;, &quot;#&quot;, &quot;$&quot;, &quot;%&quot;, &quot;^&quot;, &quot;&amp;&quot;, &quot;*&quot;, &quot;(&quot;, &quot;)&quot;, &quot;e&quot;, &quot;4&quot;]&quot;) is not equal to (&quot;[&quot;!&quot;, &quot;@&quot;, &quot;#&quot;, &quot;$&quot;, &quot;%&quot;, &quot;^&quot;, &quot;&amp;&quot;, &quot;*&quot;, &quot;(&quot;, &quot;)&quot;, &quot;e&quot;, &quot;4&quot;, &quot;\n&quot;]&quot;)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> 由上可知， .  不匹配 换行符  \n</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//        XCTAssertTrue(config.match_result)</span><br><span class="hljs-type">XCTAssertEqual</span>(config.match_result_detail, r)<br></code></pre></td></tr></table></figure></blockquote><h2 id="量词-：-Measure-Count"><a href="#量词-：-Measure-Count" class="headerlink" title="量词 ： Measure Count"></a>量词 ： Measure Count</h2><h3 id="m-至少连续出现-m-词"><a href="#m-至少连续出现-m-词" class="headerlink" title="{m,} 至少连续出现 m 词"></a><code>&#123;m,&#125;</code> 至少连续出现 <code>m</code> 词</h3><h3 id="m-连续出现-m-次"><a href="#m-连续出现-m-次" class="headerlink" title="{m}  连续出现 m 次"></a><code>&#123;m&#125;</code>  连续出现<code> m</code> 次</h3><h3 id="0-1-连续出现次数-要么0-要么1"><a href="#0-1-连续出现次数-要么0-要么1" class="headerlink" title="? &#x3D;&#x3D; {0, 1} 连续出现次数 要么0 要么1"></a><code>?</code> &#x3D;&#x3D; <code>&#123;0, 1&#125;</code> 连续出现次数 要么0 要么1</h3><h3 id="1-至少连续出现-1-次"><a href="#1-至少连续出现-1-次" class="headerlink" title="+ &#x3D;&#x3D; {1,} 至少连续出现 1 次"></a><code>+</code> &#x3D;&#x3D; <code>&#123;1,&#125;</code> 至少连续出现 1 次</h3><h3 id="等价于-0-，表示出现任意次，有可能不出现"><a href="#等价于-0-，表示出现任意次，有可能不出现" class="headerlink" title="*等价于 {0,}，表示出现任意次，有可能不出现"></a><code>*</code>等价于 <code>&#123;0,&#125;</code>，表示出现任意次，有可能不出现</h3><h2 id="贪婪匹配与惰性匹配"><a href="#贪婪匹配与惰性匹配" class="headerlink" title="贪婪匹配与惰性匹配"></a>贪婪匹配与惰性匹配</h2><h3 id="贪婪匹配：-尽可能多的-匹配-出-满足条件的-要求"><a href="#贪婪匹配：-尽可能多的-匹配-出-满足条件的-要求" class="headerlink" title="贪婪匹配： 尽可能多的 匹配 出 满足条件的 要求"></a>贪婪匹配： 尽可能多的 匹配 出 满足条件的 要求</h3><p>如下案例</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs swift">config <span class="hljs-operator">=</span> .<span class="hljs-keyword">init</span>(<br>    pattern: <span class="hljs-string">&quot;<span class="hljs-subst">\\</span>d&#123;2,5&#125;&quot;</span>, <span class="hljs-comment">// 表示数字连续出现 2 到 5 次</span><br>    inputString: <span class="hljs-string">&quot;123 1234 12345 123456&quot;</span><br>)<br><span class="hljs-keyword">let</span> result <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;123&quot;</span>, <span class="hljs-string">&quot;1234&quot;</span>, <span class="hljs-string">&quot;12345&quot;</span>, <span class="hljs-string">&quot;12345&quot;</span>]<br><span class="hljs-type">XCTAssertEqual</span>(config.match_result_detail, result)<br></code></pre></td></tr></table></figure><h3 id="惰性匹配：-表示在量词后-添加-“-”"><a href="#惰性匹配：-表示在量词后-添加-“-”" class="headerlink" title="惰性匹配： 表示在量词后 添加 “?”"></a>惰性匹配： 表示在量词后 添加 “?”</h3><p>如下案例</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs swift">config <span class="hljs-operator">=</span> .<span class="hljs-keyword">init</span>(<br>    pattern: <span class="hljs-string">&quot;<span class="hljs-subst">\\</span>d&#123;2,5&#125;?&quot;</span>,<br>    inputString: <span class="hljs-string">&quot;123 1234 12345 123456&quot;</span><br>)<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> &quot;\\d&#123;2,5&#125;?&quot;  后面 添加了 一个 ？ 表示，虽然 2 到 5 次都行，当 2 个就够的时候，就不再往下尝试了</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">let</span> result <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;12&quot;</span>, <span class="hljs-string">&quot;12&quot;</span>,<span class="hljs-string">&quot;34&quot;</span>,<span class="hljs-string">&quot;12&quot;</span>,<span class="hljs-string">&quot;34&quot;</span>, <span class="hljs-string">&quot;12&quot;</span>,<span class="hljs-string">&quot;34&quot;</span>,<span class="hljs-string">&quot;56&quot;</span>]<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> inputString: &quot;123 1234 12345 123456&quot;</span><br><span class="hljs-comment"> result[0] == &quot;12&quot; 表示 从 123 中匹配的    这里有一个连续的出现2次的数字</span><br><span class="hljs-comment"> result[1] == &quot;12&quot;，result[2] == &quot;34&quot;  表示 从 1234 中匹配的  这里面有两个 连续的出现2次的数字</span><br><span class="hljs-comment"> result[3] == &quot;12&quot;，result[4] == &quot;34&quot;  表示 从 12345 中匹配的   这里面有两个 连续的出现2次的数字</span><br><span class="hljs-comment"> result[5] == &quot;12&quot;，result[6] == &quot;34&quot; ，result[7] == &quot;56&quot;表示 从 12345 中匹配的   这里面有三个 连续的出现2次的数字</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">XCTAssertEqual</span>(config.match_result_detail, result)<br></code></pre></td></tr></table></figure><h2 id="多选分支-逻辑或"><a href="#多选分支-逻辑或" class="headerlink" title="|多选分支 &#x3D;&#x3D; 逻辑或"></a><code>|</code>多选分支 &#x3D;&#x3D; 逻辑或</h2><blockquote><p> 一个模式可以实现横向和纵向模糊匹配。而多选分支可以支持多个子模式任选其一。</p><p> 具体形式如下：(p1|p2|p3)，其中 p1、p2 和 p3 是子模式，用 |（管道符）分隔，表示其中任何之一。</p><p>**<code>|</code>**表示逻辑上的“或”关系。具体来说，| 用于在正则表达式中分隔两个模式，表示匹配其中任意一个模式即可</p><p>分支结构也是惰性的，前面的选项匹配成功就不会匹配后面的</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">func</span> <span class="hljs-title function_">test_multiple_branch</span>() &#123;<br>    config <span class="hljs-operator">=</span> .<span class="hljs-keyword">init</span>(<br>        pattern: <span class="hljs-string">&quot;good|nice&quot;</span>,<span class="hljs-comment">// 相当于 逻辑或</span><br>        inputString: <span class="hljs-string">&quot;good idea, nice try.&quot;</span><br>    )<br>    <span class="hljs-keyword">let</span> r <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;good&quot;</span>,<span class="hljs-string">&quot;nice&quot;</span>]<br>    <span class="hljs-type">XCTAssertEqual</span>(config.match_result_detail, r)<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> <span class="hljs-doctag">NOTE:</span></span><br><span class="hljs-comment"> 应该注意，比如我用 /good|goodbye/，去匹配 &quot;goodbye&quot; 字符串时，结果是 &quot;good&quot;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">func</span> <span class="hljs-title function_">test_multiple_branch001</span>() &#123;<br>    config <span class="hljs-operator">=</span> .<span class="hljs-keyword">init</span>(<br>        pattern: <span class="hljs-string">&quot;good|goodbye&quot;</span>,<span class="hljs-comment">// 相当于 逻辑或</span><br>        inputString: <span class="hljs-string">&quot;goodbye&quot;</span><br>    )<br><br>    <span class="hljs-keyword">let</span> r0 <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;good&quot;</span>]<br><span class="hljs-comment">//        let r1 = [&quot;goodbye&quot;] // 这个测试不通过，其匹配的结果是 good</span><br><br>    <span class="hljs-type">XCTAssertEqual</span>(config.match_result_detail, r0)<br><span class="hljs-comment">//        XCTAssertEqual(config.match_result_detail, r1) // 这个测试项 不通过</span><br>&#125;<br><br><span class="hljs-keyword">func</span> <span class="hljs-title function_">test_multiple_branch002</span>() &#123;<br>    config <span class="hljs-operator">=</span> .<span class="hljs-keyword">init</span>(<br>        pattern: <span class="hljs-string">&quot;goodbye|good&quot;</span>,<span class="hljs-comment">// 相当于 逻辑或</span><br>        inputString: <span class="hljs-string">&quot;goodbye&quot;</span><br>    )<br><br>    <span class="hljs-keyword">let</span> r1 <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;goodbye&quot;</span>]<br><br>    <span class="hljs-type">XCTAssertEqual</span>(config.match_result_detail, r1)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="位置匹配"><a href="#位置匹配" class="headerlink" title="位置匹配"></a>位置匹配</h2><blockquote><p>理解位置:</p><p>​对于位置的理解，我们可以理解成空字符 “”,每一个 空字符串”” 就表示位置</p><p>​hello &#x3D; <code>&quot;&quot;</code>+<code>&quot;h&quot;</code>+<code>&quot;&quot;</code>+<code>&quot;e&quot;</code>+<code>&quot;&quot;</code>+<code>&quot;l&quot;</code>+<code>&quot;&quot;</code>+<code>&quot;l&quot;</code>+<code>&quot;&quot;</code>+<code>&quot;o&quot;</code>+<code>&quot;&quot;</code></p></blockquote><h3 id=""><a href="#" class="headerlink" title="^, $"></a><code>^</code>, <code>$</code></h3><ul><li><code>^</code> 开始位置</li><li><code>$ </code> 结束位置</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> inputString <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span><br><span class="hljs-keyword">let</span> pattern <span class="hljs-operator">=</span> <span class="hljs-string">&quot;(^|$)&quot;</span> <span class="hljs-comment">// 要么开头，要么结尾</span><br><span class="hljs-keyword">let</span> replaceStr <span class="hljs-operator">=</span> <span class="hljs-string">&quot;#&quot;</span><br><br>config <span class="hljs-operator">=</span> .<span class="hljs-keyword">init</span>(pattern: pattern, inputString: inputString, replaceStr: replaceStr)<br><span class="hljs-keyword">let</span> r <span class="hljs-operator">=</span> <span class="hljs-string">&quot;#hello#&quot;</span><br><span class="hljs-type">XCTAssertEqual</span>(config.modify_result, r)<br></code></pre></td></tr></table></figure><h3 id="b-B"><a href="#b-B" class="headerlink" title="\b,\B"></a><code>\b</code>,<code>\B</code></h3><blockquote><p>在正则表达式中，\b 和 \B 是用于表示单词边界（Word Boundary）的元字符，</p><p>它们有如下的含义：</p><ul><li><code>\b</code> 是单词边界，具体就是 <code>\w</code> 与<code> \W</code> 之间的位置，也包括 <code>\w</code> 与 <code>^</code> 之间的位置，和<code>\w</code>与 <code>$ </code>之间的位置 </li><li><code>\B</code>（非单词边界）： 与 <code>\b</code> 相反，<code>\B</code> 表示匹配不是单词边界的位置。它同样是一个零宽断言，不消耗匹配字符。</li></ul></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> inputString <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[Swift] Les@$son_01.txt&quot;</span><br><span class="hljs-keyword">let</span> pattern <span class="hljs-operator">=</span> <span class="hljs-string">&quot;<span class="hljs-subst">\\</span>b&quot;</span><br><span class="hljs-keyword">let</span> replaceStr <span class="hljs-operator">=</span> <span class="hljs-string">&quot;#&quot;</span><br><br>config <span class="hljs-operator">=</span> .<span class="hljs-keyword">init</span>(pattern: pattern, inputString: inputString, replaceStr: replaceStr)<br><span class="hljs-keyword">let</span> r <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[#Swift#] #Les#@$#son_01#.#txt#&quot;</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> 去理解 单词边界的意思    Swift   Les    son_01   txt 都是单词</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-type">XCTAssertEqual</span>(config.modify_result, r)<br></code></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> inputString <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[Swift] Lesson_01.txt&quot;</span><br><span class="hljs-keyword">let</span> pattern <span class="hljs-operator">=</span> <span class="hljs-string">&quot;<span class="hljs-subst">\\</span>B&quot;</span><br><span class="hljs-keyword">let</span> replaceStr <span class="hljs-operator">=</span> <span class="hljs-string">&quot;#&quot;</span><br><br><br>config <span class="hljs-operator">=</span> .<span class="hljs-keyword">init</span>(pattern: pattern, inputString: inputString, replaceStr: replaceStr)<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> 理解非单词边界，  跟 单词边界 正相反 ，参考上面的案例</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">let</span> r <span class="hljs-operator">=</span> <span class="hljs-string">&quot;#[S#w#i#f#t]# L#e#s#s#o#n#_#0#1.t#x#t&quot;</span><br><br><span class="hljs-type">XCTAssertEqual</span>(config.modify_result, r)<br></code></pre></td></tr></table></figure><h3 id="和"><a href="#和" class="headerlink" title="(?=...) 和 (?!=...)"></a><code>(?=...)</code> 和 <code>(?!=...)</code></h3><blockquote><ul><li><p><code>(?=...)</code>： 正向先行断言，表示模式只有在某个位置之前的位置匹配时才匹配。例如，foo(?&#x3D;bar) 匹配 “foo”，但仅当其后面是 “bar” 时才匹配。</p></li><li><p><code>(?!...)</code>： 负向先行断言，表示模式只有在某个位置之前的位置不匹配时才匹配。例如，foo(?!bar) 匹配 “foo”，但仅当其后面不是 “bar” 时才匹配。</p></li></ul></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">func</span> <span class="hljs-title function_">test_postive_pattern</span>() &#123;<br>    <span class="hljs-keyword">let</span> inputString <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span><br>    <span class="hljs-keyword">let</span> pattern <span class="hljs-operator">=</span> <span class="hljs-string">&quot;(?=l)&quot;</span> <span class="hljs-comment">// 当前位置后 是 l 的 位置</span><br>    <span class="hljs-keyword">let</span> replaceStr <span class="hljs-operator">=</span> <span class="hljs-string">&quot;#&quot;</span><br><br>    config <span class="hljs-operator">=</span> .<span class="hljs-keyword">init</span>(pattern: pattern, inputString: inputString, replaceStr: replaceStr)<br><br>    <span class="hljs-keyword">let</span> r <span class="hljs-operator">=</span> <span class="hljs-string">&quot;he#l#lo&quot;</span><br><br>    <span class="hljs-type">XCTAssertEqual</span>(config.modify_result, r)<br>&#125;<br><br><span class="hljs-keyword">func</span> <span class="hljs-title function_">test_negative_pattern</span>() &#123;<br>    <span class="hljs-keyword">let</span> inputString <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span><br>    <span class="hljs-keyword">let</span> pattern <span class="hljs-operator">=</span> <span class="hljs-string">&quot;(?!l)&quot;</span><br>    <span class="hljs-keyword">let</span> replaceStr <span class="hljs-operator">=</span> <span class="hljs-string">&quot;#&quot;</span><br><br>    config <span class="hljs-operator">=</span> .<span class="hljs-keyword">init</span>(pattern: pattern, inputString: inputString, replaceStr: replaceStr)<br><br>    <span class="hljs-keyword">let</span> r <span class="hljs-operator">=</span> <span class="hljs-string">&quot;#h#ell#o#&quot;</span> <span class="hljs-comment">//当前位置后 不是是 l 的 位置</span><br><br>    <span class="hljs-type">XCTAssertEqual</span>(config.modify_result, r)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="在正则表达式中的作用"><a href="#在正则表达式中的作用" class="headerlink" title="? 在正则表达式中的作用"></a>? 在正则表达式中的作用</h3><p>在正则表达式中，<code>?</code> 具有多种用法，取决于它出现的位置和上下文。以下是主要的用法：</p><ol><li><strong>零次或一次匹配：</strong> 在一个字符、字符集、子表达式或分组后面使用 <code>?</code>，表示该元素是可选的，即出现零次或一次。例如，正则表达式 <code>colou?r</code> 可以匹配 “color” 或 “colour”。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs regex">colou?r<br></code></pre></td></tr></table></figure><ul><li>匹配：”color”, “colour”</li><li>不匹配：”colouur”, “colr”</li></ul><ol><li><strong>非贪婪匹配：</strong> 在量词（如 <code>*</code> 或 <code>+</code>）后面使用 <code>?</code>，表示匹配尽量少的字符。默认情况下，量词是贪婪的，会尽量匹配更多的字符。通过在量词后面添加 <code>?</code>，可以实现非贪婪匹配。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs regex">.*?  // 匹配任意字符，但尽量匹配最少字符<br></code></pre></td></tr></table></figure><ol><li><strong>正向先行断言：</strong> 在一个位置之前使用 <code>(?=...)</code>，表示模式只有在该位置之前的位置匹配时才匹配。例如，<code>foo(?=bar)</code> 匹配 “foo”，但仅当其后面是 “bar” 时才匹配。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs regex">foo(?=bar)<br></code></pre></td></tr></table></figure><ul><li>匹配：”foobar”, “foo123bar”</li><li>不匹配：”foo”, “bar”</li></ul><ol><li><strong>负向先行断言：</strong> 在一个位置之前使用 <code>(?!...)</code>，表示模式只有在该位置之前的位置不匹配时才匹配。例如，<code>foo(?!bar)</code> 匹配 “foo”，但仅当其后面不是 “bar” 时才匹配。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs regex">foo(?!bar)<br></code></pre></td></tr></table></figure><ul><li>匹配：”foo”, “foobaz”</li><li>不匹配：”foobar”, “foo123bar”</li></ul>]]></content>
    
    
    <categories>
      
      <category>regExp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>regExp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lua-Loop(循环)</title>
    <link href="/2024/01/03/004lua/lua-Loop-%E5%BE%AA%E7%8E%AF/"/>
    <url>/2024/01/03/004lua/lua-Loop-%E5%BE%AA%E7%8E%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><h5 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax:"></a>Syntax:</h5><blockquote><p>while(condition)<br>do<br>   statement(s)<br>end</p></blockquote><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lua">a = <span class="hljs-number">10</span><br><span class="hljs-keyword">while</span>( a &lt; <span class="hljs-number">20</span> )<br><span class="hljs-keyword">do</span><br>   <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;value of a:&quot;</span>, a)<br>   a = a+<span class="hljs-number">1</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><p><a href="https://www.tutorialspoint.com/lua/lua_for_loop.htm">参考链接1</a></p><blockquote><p>The <strong>for</strong> statement has two variants(变种): <u>the <em>numeric</em> <strong>for</strong></u> and <u>the <em>generic</em> <strong>for</strong></u>.</p></blockquote><h4 id="Numeric-for-数值for循环"><a href="#Numeric-for-数值for循环" class="headerlink" title="Numeric for (数值for循环)"></a>Numeric <strong>for</strong> (数值for循环)</h4><p><a href="https://www.lua.org/pil/4.3.4.html">官方文档</a></p><blockquote><p> for var&#x3D;exp1,exp2,exp3 do<br>   something<br> end</p><blockquote><ul><li>exp1: initial condition</li><li>exp2:  final condition</li><li>exp3:  step<ul><li>this exp is optional,when absent, Lua assumes one as the step value.</li></ul></li></ul></blockquote></blockquote><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">--[[</span><br><span class="hljs-comment">exp1: i = 10</span><br><span class="hljs-comment">exp2: 4</span><br><span class="hljs-comment">exp3: -2</span><br><span class="hljs-comment">]]</span><br><span class="hljs-keyword">for</span> i = <span class="hljs-number">10</span>, <span class="hljs-number">4</span>, <span class="hljs-number">-2</span> <span class="hljs-keyword">do</span><br>   <span class="hljs-built_in">print</span>(i) <span class="hljs-comment">-- 10,8,6,4</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- Omit exp3</span><br><span class="hljs-keyword">for</span> i = <span class="hljs-number">1</span>, <span class="hljs-number">3</span> <span class="hljs-keyword">do</span><br>   <span class="hljs-built_in">print</span>(i) <span class="hljs-comment">-- 1,2,3</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h3 id="Generic-for-泛型for循环"><a href="#Generic-for-泛型for循环" class="headerlink" title="Generic for (泛型for循环)"></a>Generic <strong>for</strong> (泛型for循环)</h3><p><a href="https://www.lua.org/pil/4.3.5.html">官方文档</a></p><p>The generic <strong>for</strong> loop allows you to <u>traverse(遍历) all values</u> returned by <strong>an iterator function.</strong></p><h5 id="ipairs"><a href="#ipairs" class="headerlink" title="ipairs()"></a>ipairs()</h5><blockquote><p>When the traversed value is nil, the for loop will terminate.</p></blockquote><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> a = &#123;<span class="hljs-string">&quot;one&quot;</span>,<span class="hljs-string">&quot;two&quot;</span>,<span class="hljs-literal">nil</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3.14</span>&#125;<br><span class="hljs-keyword">for</span> index, value <span class="hljs-keyword">in</span> <span class="hljs-built_in">ipairs</span>(a) <span class="hljs-keyword">do</span><br>   <span class="hljs-built_in">print</span>(value) <span class="hljs-comment">-- one, two</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h5 id="pairs"><a href="#pairs" class="headerlink" title="pairs()"></a>pairs()</h5><blockquote><p>When the traversed value is nil, the for loop will omit the nil value and continue to the rest.</p></blockquote><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> a = &#123;<span class="hljs-string">&quot;one&quot;</span>,<span class="hljs-string">&quot;two&quot;</span>,<span class="hljs-literal">nil</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3.14</span>&#125;<br><span class="hljs-keyword">for</span> index, value <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(a) <span class="hljs-keyword">do</span><br>   <span class="hljs-built_in">print</span>(value) <span class="hljs-comment">-- one, two, 1, 2, 3.14</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h2 id="repeat…until"><a href="#repeat…until" class="headerlink" title="repeat…until"></a>repeat…until</h2><p>Similiar to other programing language.</p><h2 id="nested-loop"><a href="#nested-loop" class="headerlink" title="nested loop"></a>nested loop</h2><p>Similiar to other programing language.</p>]]></content>
    
    
    <categories>
      
      <category>Lua</category>
      
    </categories>
    
    
    <tags>
      
      <tag>lua</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lua-Operators(运算符)</title>
    <link href="/2024/01/03/004lua/lua-Operators-%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2024/01/03/004lua/lua-Operators-%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h2 id="Arthmetic-Operators"><a href="#Arthmetic-Operators" class="headerlink" title="Arthmetic Operators"></a>Arthmetic Operators</h2><p>Similiar to other programing languages, there are also <code>+</code> <code>-</code> <code>*</code> <code>/</code> <code>%</code> in Lua. On top of that, lua also has <code>^</code> (exponent) operator.</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> a = <span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(a ^ <span class="hljs-number">1</span>)    <span class="hljs-comment">-- 2.0</span><br><span class="hljs-built_in">print</span>(a ^ <span class="hljs-number">2</span>)    <span class="hljs-comment">-- 4.0</span><br><span class="hljs-built_in">print</span>(a ^ <span class="hljs-number">3</span>)    <span class="hljs-comment">-- 8.0</span><br><span class="hljs-built_in">print</span>(a ^ <span class="hljs-number">4</span>)    <span class="hljs-comment">-- 16.0</span><br></code></pre></td></tr></table></figure><h2 id="Relational-Operators"><a href="#Relational-Operators" class="headerlink" title="Relational Operators"></a>Relational Operators</h2><p>This section is the same to other programing language. </p><blockquote><p><strong>Note: unequal operator is <code>~=</code></strong></p></blockquote><h2 id="Logical-Operators"><a href="#Logical-Operators" class="headerlink" title="Logical Operators"></a>Logical Operators</h2><p>This section has a great distinction from others.</p><blockquote><p><strong>NOTE</strong>:</p><p>Only <strong><code>nil</code></strong> or <strong><code>false</code></strong> will be recognized as false.</p></blockquote><h5 id="and"><a href="#and" class="headerlink" title="and"></a><code>and</code></h5><p>Similiar to other language <code>&amp;&amp;</code></p><p><img src="https://raw.githubusercontent.com/JackieDai/blogAssets/main/202401031606374.png"></p><h5 id="or"><a href="#or" class="headerlink" title="or"></a><code>or</code></h5><p>Similiar to other language <code>||</code></p><p><img src="https://raw.githubusercontent.com/JackieDai/blogAssets/main/202401031613705.png"></p><h5 id="not"><a href="#not" class="headerlink" title="not"></a><code>not</code></h5><p>Similiar to other language <code>!</code></p><h2 id="Misc-Operators"><a href="#Misc-Operators" class="headerlink" title="Misc Operators"></a>Misc Operators</h2><ol><li><p><code>.. </code>    concatenation</p><blockquote><p>Concatenates two strings.</p></blockquote><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> a, b = <span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&#x27;lua&#x27;</span><br><span class="hljs-keyword">local</span> c = a .. <span class="hljs-string">&quot;-&quot;</span> .. b<br><span class="hljs-built_in">print</span>(c) <span class="hljs-comment">-- hello-lua</span><br></code></pre></td></tr></table></figure></li><li><p><code>#</code>   length</p><blockquote><p>An unary operator that return <strong>the length of the a string or a table.</strong></p></blockquote><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> a = <span class="hljs-string">&quot;hello&quot;</span><br><span class="hljs-keyword">local</span> b = #a<br><span class="hljs-built_in">print</span>(b) <span class="hljs-comment">-- 5</span><br><br><span class="hljs-keyword">local</span> t = &#123;<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;lua&quot;</span>,<span class="hljs-string">&quot;python&quot;</span>&#125;<br><span class="hljs-keyword">local</span> c = #t<br><span class="hljs-built_in">print</span>(c) <span class="hljs-comment">-- 3</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Lua</category>
      
    </categories>
    
    
    <tags>
      
      <tag>lua</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Year-End Summary for 2023</title>
    <link href="/2023/12/26/005personal/Year-End-Summary-for-2023/"/>
    <url>/2023/12/26/005personal/Year-End-Summary-for-2023/</url>
    
    <content type="html"><![CDATA[<blockquote><p><strong>Key words</strong> of 2023:</p><ul><li>Make Grandpa and Grandma’s dream of the journey to Beijing come true.</li><li>A termination hit me unexpectedly due to uncontrollable factors.</li><li>The door toward a new world scenario has been opened by LUX.</li><li>Make rational plans and proceed step by step. </li><li>All of my wife and son are doing well and will continue to do well.</li></ul></blockquote><h2 id="The-journey-to-BeiJing"><a href="#The-journey-to-BeiJing" class="headerlink" title="The journey to BeiJing"></a>The journey to BeiJing</h2><p> People who were born in the 1940s to the 1960s have profound faith in Chairman Mao; it’s one of the most significant beliefs for them. My grandpa and grandma are among those kind people. Especially for Grandpa, he knows lots of songs from that special period, such as 《Hong Hu Shui》, 《She Hui Zhu Yi Hao》, and many more.</p><p> With the time goes by, they get older and older.Each of them is nearly 80 years old. I think no kid will go along with them to start the journey to Beijing, except for my sister and me, even though they have many sons and grandsons. Because they have too much work to do, they are unable to take a trip with the elders.</p><p> So, I decided to start the journey on April 5th and end on April 8th. …</p><p> I don’t want to write the more detail about the journey. Just need to know that we experienced fond memories and a rewarding time.</p><h2 id="I-was-laid-off"><a href="#I-was-laid-off" class="headerlink" title="I was laid off"></a>I was laid off</h2><p><del>I was laid off on August 11th suddenly. Can you imagine that I was still working in that afternoon and got a phone call from my boss hence I lost my job For irresistible factors.</del><br>I was laid off suddenly on August 11th. Can you imagine that I was still working in the afternoon when I received a phone call from my boss, resulting in the loss of my job due to uncontrollable factors? (In fact,Our business has been shut down, and my colleagues’s situation were the same as mine.)</p><p>To be honest, I felt turmoil. No job means no income. How can I pay my mortgage? How can I support my family? How can I survive? These are all real-world problems.</p><p>So I need a job as soon as possible. <del>I know I was falling into a trap, I know the job provide incomes can not solve the problem in the long term, but i can not stop.</del> I know I fell into a trap. I understand that a job providing income may not solve the problem in the long term, but I can’t stop. The trap is the Rat Race, the biggest problem in my whole life. I have not <u>figured out</u> a strategy to resolve it. Currently, a short-term stable job is necessary for me.</p><p>I had started to <u>reorganize my resume</u> and applied to many companies. Due to significant layoffs in the internet industry, only a few companies have <u>granted interview opportunities</u>, but the results were not as expected.</p><p>I want to say “FUCK”.</p><h2 id="Join-the-Lux-company"><a href="#Join-the-Lux-company" class="headerlink" title="Join the Lux company"></a>Join the Lux company</h2><p>I had been hired after fore rounds of interview. Except for the third round’s onsite interview, all others were <u>conducted</u> through online interviews. </p><p><del>I appreciate with my manager named Near profusely. He had did lots of help for me.</del>I appreciate my manager named Near profusely. He has done lots of help for me.(I am deeply grateful to my manager, Near, for his extensive assistance.) It seems to me like a completely new industry In Lux. I have never <u>been exposed to</u> the manufacturing industry.</p><p>As a novice in the scope of this field, <del>I need lots of to learn to meet work’s requirement</del>I need to learn a lot to meet the requirements of my work. <del>Such as lua, atlas, python, Macos development skills</del>This includes skills in Lua, Atlas, Python, and macOS development. I’m glad to welcome this challenge, and I believe I can do it well.</p><h2 id="Rational-Plans"><a href="#Rational-Plans" class="headerlink" title="Rational Plans"></a>Rational Plans</h2><blockquote><ul><li>This section is imperative to me. Act on it step by step.</li><li>The plans of 2024 are as follows:</li></ul></blockquote><ol><li><strong>Continue to finish reading the Rich Dad Poor Dad book</strong></li><li><strong>Accumulate a vocabulary of 3000 unfamiliar words.<del>Accumulate the number of 3000 unfamiliar words</del></strong></li><li><strong>Read Elon Musk’s book.</strong></li><li><strong>Listen to the audio resource of the book.</strong></li><li><strong>Master Basic Skills about C,C++,Regex</strong></li><li><strong>Master Python and Lua development skills</strong></li></ol><blockquote><ul><li>English learning is a long term process.<del>It is your basic skills. I think it is more important than procedural competent.</del>  <u>It forms the foundation of your skills</u>, which I believe is more important than procedural competence. Train your english abilities diligently.</li><li>If I can <del>do the above plans</del> accomplish the plans above, I will give myself the biggest “Zan”! There will be no regret in 2024.</li><li><strong>Strive! Strive! Strive! Struggle! Struggle! Struggle!</strong></li></ul></blockquote><h2 id="Personal-life"><a href="#Personal-life" class="headerlink" title="Personal life"></a>Personal life</h2><p><strong>I am satsified with my family. Love my wife and son forever</strong></p><p>Family is my powerful engine; it provides much motivation for me to move forward. God bless you.</p>]]></content>
    
    
    <categories>
      
      <category>Personal summary</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>lua-luarocks在Project中的应用</title>
    <link href="/2023/12/23/004lua/lua-luarocks%E5%9C%A8Project%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <url>/2023/12/23/004lua/lua-luarocks%E5%9C%A8Project%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p><a href="https://martin-fieber.de/blog/goodbye-snake-i-go-to-the-moon/">Reference</a></p><h2 id="Install-luarocks"><a href="#Install-luarocks" class="headerlink" title="Install luarocks"></a>Install luarocks</h2><p><strong>mission</strong>: use <code>luarocks</code> to manage third libs in lua project.</p><blockquote><p>Guarantee the <code>luarocks</code> have been installed in your mac. if not , using the follow command.</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">$ <span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>luarocks<br></code></pre></td></tr></table></figure></blockquote><p>Generally, the libs installed using <code>luarocks</code> will locate at global position. <del>But in real situation, we’d like install lib is each Project locally not in global.</del>  But in a real-world scenario, we prefer to install libs locally for each project rather than globally.</p><h2 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h2><blockquote><p>I will install all packages inside a <code>lua_modules</code> folder <u>in the root of a project</u>, using the <code>--tree</code> option of the LuaRocks CLI. As an example, installing the <a href="https://luarocks.org/modules/kikito/inspect">inspect</a> package.</p></blockquote><ol><li><p><code>cd</code> the root of your Project.</p></li><li><p>excute <code>luarocks install --tree=lua_modules inspect</code></p><p><img src="https://raw.githubusercontent.com/JackieDai/blogAssets/main/202312230851976.png"></p><blockquote><p><code>tree=lua_modules</code> means the libs will be installed at that folder.</p></blockquote></li><li><p>create <code>setup.lua</code> and <code>test.lua</code> files.</p><ol><li><p>we need make configrations for <code>pageage</code> in <code>setup.lua</code> file</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- setup.lua</span><br><span class="hljs-keyword">local</span> version = <span class="hljs-built_in">_VERSION</span>:<span class="hljs-built_in">match</span>(<span class="hljs-string">&quot;%d+%.%d+&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;version&#x27;</span>,version) <span class="hljs-comment">-- version5.4</span><br><br><span class="hljs-built_in">package</span>.<span class="hljs-built_in">path</span> = <span class="hljs-string">&#x27;lua_modules/share/lua/&#x27;</span><br>  .. version ..<br>  <span class="hljs-string">&#x27;/?.lua;lua_modules/share/lua/&#x27;</span><br>  .. version ..<br>  <span class="hljs-string">&#x27;/?/init.lua;&#x27;</span><br>  .. <span class="hljs-built_in">package</span>.<span class="hljs-built_in">path</span><br><span class="hljs-built_in">package</span>.<span class="hljs-built_in">cpath</span> = <span class="hljs-string">&#x27;lua_modules/lib/lua/&#x27;</span><br>  .. version ..<br>  <span class="hljs-string">&#x27;/?.so;&#x27;</span> .. <span class="hljs-built_in">package</span>.<span class="hljs-built_in">cpath</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;package.path == &#x27;</span>,<span class="hljs-built_in">package</span>.<span class="hljs-built_in">path</span>) <span class="hljs-comment">-- package.path ==lua_modules/share/lua/5.4/?.lua;lua_modules/share/lua/5.4/?/init.lua;/usr/local/share/lua/5.4/?.lua;/usr/local/share/lua/5.4/?/init.lua;/usr/local/lib/lua/5.4/?.lua;/usr/local/lib/lua/5.4/?/init.lua;./?.lua;./?/init.lua</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;package.cpath == &#x27;</span>,<span class="hljs-built_in">package</span>.<span class="hljs-built_in">cpath</span>) <span class="hljs-comment">-- package.cpath == lua_modules/lib/lua/5.4/?.so;/usr/local/lib/lua/5.4/?.so;/usr/local/lib/lua/5.4/loadall.so;./?.so</span><br></code></pre></td></tr></table></figure></li><li><p>test the lib in <code>test.lua</code>file</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">--[[</span><br><span class="hljs-comment">    <span class="hljs-doctag">NOTE:</span></span><br><span class="hljs-comment">    make sure setup.lua must be loaded. or `require &quot;inspect&quot;` cause error!</span><br><span class="hljs-comment">]]</span><br><br><span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;setup&quot;</span>)<br><br><span class="hljs-keyword">local</span> inspect = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;inspect&quot;</span><br><span class="hljs-keyword">local</span> a = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;<br><br><span class="hljs-built_in">print</span>(inspect(a))<br><br><span class="hljs-comment">--[[</span><br><span class="hljs-comment">result:</span><br><span class="hljs-comment">&#123; 1, 2 &#125;</span><br><span class="hljs-comment">]]</span><br></code></pre></td></tr></table></figure></li></ol></li><li><p>the demo dir as follows:</p><p><img src="https://raw.githubusercontent.com/JackieDai/blogAssets/main/202312230910092.png"></p></li></ol><blockquote><p>If you install libs locally, there is nothing when you excute <code>luarocks list</code>;</p><p><img src="https://raw.githubusercontent.com/JackieDai/blogAssets/main/202312230913600.png"></p><p><del>But if you install globally, there are the libs you installed before when excute that command.</del></p><p>But if you install globally, the libraries you installed before will be available when executing that command.</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Lua</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tools</tag>
      
      <tag>lua</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lua-优秀博客</title>
    <link href="/2023/12/23/004lua/lua-%E4%BC%98%E7%A7%80%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/12/23/004lua/lua-%E4%BC%98%E7%A7%80%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="Lua-project-setup-with-LuaRocks"><a href="#Lua-project-setup-with-LuaRocks" class="headerlink" title="Lua project setup with LuaRocks"></a>Lua project setup with LuaRocks</h2><p><a href="https://martin-fieber.de/blog/lua-project-setup-with-luarocks/">参考链接</a></p><blockquote><p>这个blog里面还有其他关于 lua 的相关介绍</p></blockquote><hr>]]></content>
    
    
    <categories>
      
      <category>Lua</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tools</tag>
      
      <tag>lua</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算markdown标题数量&amp;给markdown注入内容</title>
    <link href="/2023/12/21/003tools/001_caculate_H_count/"/>
    <url>/2023/12/21/003tools/001_caculate_H_count/</url>
    
    <content type="html"><![CDATA[<p>为了统计<code>markdown</code> 文件中的标题的数量，使用python 如下</p><blockquote><p>下面的代码有两个主要功能</p><ul><li>统计markdown文件的标题数量</li><li>给markdown文件注入<code>hexo</code>blog 标题的格式</li></ul><p>代码中的路径内容对应</p><p><img src="https://raw.githubusercontent.com/JackieDai/blogAssets/main/202312211502789.png"></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 正则匹配相关</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-comment"># 系统库</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-comment"># 日期</span><br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><span class="hljs-comment"># 时间</span><br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># 获取文件夹下的子文件夹</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">list_subdirectories</span>(<span class="hljs-params">root_dir</span>):<br>    subdirectories = [d <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> os.listdir(root_dir) <br>                      <span class="hljs-keyword">if</span> os.path.isdir(os.path.join(root_dir, d)) <br>                      <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> d.startswith(<span class="hljs-string">&#x27;.&#x27;</span>)  <span class="hljs-comment"># 排除隐藏文件夹</span><br>                      <span class="hljs-keyword">and</span> d.lower() != <span class="hljs-string">&#x27;unfamiliarwords&#x27;</span>]  <span class="hljs-comment"># 排除名为 UnfamiliarWords 的文件夹</span><br><br>    subdirectories.sort()<br>    <span class="hljs-keyword">return</span> subdirectories<br><br><span class="hljs-comment"># 获取.md 文件的文件名称</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">list_md_file</span>(<span class="hljs-params">file_path</span>):<br>    md_files = [f <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> os.listdir(file_path) <span class="hljs-keyword">if</span> f.endswith(<span class="hljs-string">&quot;.md&quot;</span>)]<br>    md_files.sort()<br>    <span class="hljs-keyword">return</span> md_files<br><br><span class="hljs-comment"># 计算md文件的标题数量</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">count_markdown_headings</span>(<span class="hljs-params">file_path</span>):<br>    <span class="hljs-comment"># 读取 Markdown 文件内容</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        content = file.read()<br><br>    <span class="hljs-comment"># 使用正则表达式匹配 Markdown 标题</span><br>    heading_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;^#+\s&#x27;</span>, re.MULTILINE)<br>    matches = heading_pattern.findall(content)<br><br>    <span class="hljs-comment"># 统计各级别标题的数量</span><br>    heading_count = &#123;&#125;<br>    <span class="hljs-keyword">for</span> <span class="hljs-keyword">match</span> <span class="hljs-keyword">in</span> matches:<br>        level = <span class="hljs-keyword">match</span>.count(<span class="hljs-string">&#x27;#&#x27;</span>)<br>        heading_count[level] = heading_count.get(level, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span><br><br>    <span class="hljs-comment"># 打印统计结果</span><br>    result = []<br>    <span class="hljs-keyword">for</span> level, count <span class="hljs-keyword">in</span> heading_count.items():<br>        <span class="hljs-comment"># print(f&#x27;Level &#123;level&#125; headings: &#123;count&#125;&#x27;)</span><br>        info_dict = &#123;<br>            <span class="hljs-string">&quot;level&quot;</span>: level,<br>            <span class="hljs-string">&quot;headings&quot;</span>: count<br>        &#125;<br>        result.append(info_dict)<br>    <span class="hljs-keyword">return</span> result<br><br><br><span class="hljs-comment"># 注入内容</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inject_content_to_markdown</span>(<span class="hljs-params">file_path, content_to_inject</span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 打开原始Markdown文件并读取内容</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>            original_content = file.read()<br><br>        <span class="hljs-comment"># 向内容开头注入新的内容</span><br>        new_content = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;content_to_inject&#125;</span>\n\n<span class="hljs-subst">&#123;original_content&#125;</span>&quot;</span><br><br>        <span class="hljs-comment"># 将修改后的内容写回Markdown文件</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>            file.write(new_content)<br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;内容已成功注入到文件：<span class="hljs-subst">&#123;file_path&#125;</span>&quot;</span>)<br><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;发生错误：<span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 注入的内容</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inject_content_func</span>(<span class="hljs-params">markdown_file_path, markdown_file_name</span>):<br><br>    time.sleep(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-comment"># 获取当前时间</span><br>    current_time = datetime.now()<br><br>    markdown_file_name = markdown_file_name.split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">0</span>]<br><br>    <span class="hljs-comment"># 格式化时间为字符串</span><br>    formatted_time = current_time.strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)<br>    <span class="hljs-comment"># 要注入的内容</span><br>    inject_content = <span class="hljs-string">f&#x27;&#x27;&#x27;---</span><br><span class="hljs-string">title: <span class="hljs-subst">&#123;markdown_file_name&#125;</span></span><br><span class="hljs-string">date: <span class="hljs-subst">&#123;formatted_time&#125;</span></span><br><span class="hljs-string">index_img: /img/richpoordad.png</span><br><span class="hljs-string">excerpt: The Part of <span class="hljs-subst">&#123;markdown_file_name&#125;</span> unfamiliar words</span><br><span class="hljs-string">tags: </span><br><span class="hljs-string">    - RichDadPoorDad</span><br><span class="hljs-string">categories: English</span><br><span class="hljs-string">---&#x27;&#x27;&#x27;</span><br>    <span class="hljs-built_in">print</span>(inject_content)<br>    inject_content_to_markdown(markdown_file_path, inject_content)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># if u want to log ecah detail of secitons, just set the boolen value True</span><br>    should_log_detail = <span class="hljs-literal">False</span><br>    <span class="hljs-comment"># 指定文件夹路径</span><br>    folder_path = <span class="hljs-string">&#x27;/Users/lingxiao/RichDadAndPoorDad&#x27;</span><br>    <span class="hljs-comment"># 获取子文件夹列表</span><br>    subdirectories = list_subdirectories(folder_path)<br><br>    total_count = <span class="hljs-number">0</span><br><br>    <span class="hljs-comment"># 输出子文件夹名称</span><br>    <span class="hljs-keyword">for</span> subdir <span class="hljs-keyword">in</span> subdirectories:<br>        <span class="hljs-comment"># print(subdir)</span><br>        folder_sub_path = folder_path + <span class="hljs-string">&quot;/&quot;</span> + subdir<br><br>        subdir_count = <span class="hljs-number">0</span><br><br>        <br>        <span class="hljs-keyword">if</span> should_log_detail:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;===========&quot;</span>*<span class="hljs-number">5</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;subdir&#125;</span> section detail as follows:&quot;</span>)<br>       <br>        md_files = list_md_file(folder_sub_path)<br><br>        <span class="hljs-comment"># 打印文件名</span><br>        <span class="hljs-keyword">for</span> md_file <span class="hljs-keyword">in</span> md_files:<br>            whole_md_address = folder_sub_path + <span class="hljs-string">&quot;/&quot;</span> + md_file<br>            <span class="hljs-comment"># 给 md 文件注入 通用脚本  !!!!!!</span><br>            inject_content_func(whole_md_address,md_file)<br><br>            <span class="hljs-comment"># 计算每一个md文件的标题个数</span><br>            result = count_markdown_headings(whole_md_address)<br>            <span class="hljs-keyword">for</span> info_dict <span class="hljs-keyword">in</span> result:<br>                <span class="hljs-keyword">if</span> info_dict[<span class="hljs-string">&quot;level&quot;</span>] == <span class="hljs-number">2</span>:<br>                    word_count = info_dict[<span class="hljs-string">&quot;headings&quot;</span>]<br>                    total_count = total_count + word_count<br>                    subdir_count = subdir_count + word_count<br>                    <span class="hljs-keyword">if</span> should_log_detail:<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\t<span class="hljs-subst">&#123;md_file&#125;</span> words count == <span class="hljs-subst">&#123;word_count&#125;</span>&#x27;</span>)<br><br>        log_str = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;subdir&#125;</span> words count == <span class="hljs-subst">&#123;subdir_count&#125;</span> \n&quot;</span><br>        <span class="hljs-keyword">if</span> should_log_detail:<br>            log_str = <span class="hljs-string">f&quot;---Total count:<span class="hljs-subst">&#123;subdir_count&#125;</span> \n&quot;</span><br>        <span class="hljs-built_in">print</span>(log_str)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;RichDadAndPoorDad 总 数 == <span class="hljs-subst">&#123;total_count&#125;</span>\n&quot;</span>)    <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tools</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rich_Dad_Poor_Dad</title>
    <link href="/2023/12/21/002english/Rich-Dad-Poor-Dad/"/>
    <url>/2023/12/21/002english/Rich-Dad-Poor-Dad/</url>
    
    <content type="html"><![CDATA[<h2 id="Rich-Dad-Poor-Dad"><a href="#Rich-Dad-Poor-Dad" class="headerlink" title="Rich Dad Poor Dad"></a>Rich Dad Poor Dad</h2><p>Pls Click on <a href="https://www.yuque.com/jk-coder/pr14f1">RichDadPoorDad</a> for many unfamiliar words.</p><p><img src="https://raw.githubusercontent.com/JackieDai/blogAssets/main/richpoordad.png"></p>]]></content>
    
    
    <categories>
      
      <category>English</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RichDadPoorDad</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客使用说明</title>
    <link href="/2023/12/20/000firstblog/hello-world/"/>
    <url>/2023/12/20/000firstblog/hello-world/</url>
    
    <content type="html"><![CDATA[<p>测试。git status….</p><p><a href="https://hexo.fluid-dev.com/docs/guide/">博客使用说明</a></p><p>使用 <a href="https://github.com/apps/utterances">utterances</a> 作为评论系统  <a href="https://www.jianshu.com/p/785d727810b3l">参考链接</a></p><p><img src="https://raw.githubusercontent.com/JackieDai/blogAssets/main/202312201801777.png"></p><p><img src="https://raw.githubusercontent.com/JackieDai/blogAssets/main/202312201802152.png"></p><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
