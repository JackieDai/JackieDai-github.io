<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>P158 Schooner 优化</title>
    <link href="/2024/06/07/008personal/Dev003/"/>
    <url>/2024/06/07/008personal/Dev003/</url>
    
    <content type="html"><![CDATA[<blockquote><p>优化之前问题</p><ol><li>csv 过于臃肿，如果牵扯到调整ERS循环的情况，那真的就是<code>一行代码</code>改一天</li><li>Yaml文件问题<ol><li><code>testParameters</code>不同；<code>actions:</code> 只有某一项或者多项参数不同，其余均相同。但是还是需要根据<code>testParameters</code> 编写Yaml,导致大量冗余代码</li><li><code>testParameters</code>不同；<code>inputs</code> 是需要从外界传入<code>find.output(...)</code>只有某一项或者多项参数不同，其余均相同，但是还是需要根据<code>testParameters</code> 编写Yaml,导致大量冗余代码</li></ol></li></ol></blockquote><h2 id="CSV优化"><a href="#CSV优化" class="headerlink" title="CSV优化"></a>CSV优化</h2><p>参考 <a href="https://github.com/JackieDai/SchoonerCSVTool">Demo</a>  readme</p><ul><li>根据ERS 分步编写CSV</li><li>CSV中定义部分逻辑，</li></ul><h2 id="Yaml优化"><a href="#Yaml优化" class="headerlink" title="Yaml优化"></a>Yaml优化</h2><h3 id="1-参数抽取"><a href="#1-参数抽取" class="headerlink" title="1. 参数抽取"></a>1. 参数抽取</h3><p>以<code>Calibration.yaml</code>为例</p><ul><li><p>优化前</p><p>优化前的代码可以参考 <code>v1.9</code> 分支 <code>commit: 253682fc7b67b893440e13cec235cc2e5be35269</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">-</span><span class="hljs-comment">#ReadADCcalfromDSMStoretoPDCA</span><br>  <span class="hljs-attr">technology:</span><span class="hljs-string">Calibration</span><br>  <span class="hljs-attr">coverage:</span><span class="hljs-string">ReadADCcalfromDSMStoretoPDCA</span><br>  <span class="hljs-attr">testParameters:</span><span class="hljs-string">&quot;*&quot;</span><br>  <span class="hljs-attr">outputs:</span><br>      <span class="hljs-attr">result:</span><br>        <span class="hljs-attr">lookup:</span> [<span class="hljs-string">sendCommand_action</span>]<br>  <span class="hljs-attr">sequence:</span><br>    <span class="hljs-attr">actions:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">sendCommand_action:</span><br>          <span class="hljs-attr">filename:</span> <span class="hljs-string">DutSendCommand.lua</span><br>          <span class="hljs-attr">args:</span><br>            <span class="hljs-string">-</span><span class="hljs-string">&quot;calib adc_get&quot;</span><br><br><span class="hljs-string">-</span><span class="hljs-comment">#CALIINV64GAIN</span><br>  <span class="hljs-attr">technology:</span><span class="hljs-string">Calibration</span><br>  <span class="hljs-attr">coverage:</span><span class="hljs-string">&quot;ReadADCcalfromDSMStoretoPDCA&quot;</span><br>  <span class="hljs-attr">testParameters:</span><span class="hljs-string">&quot;&amp;CALIINV64GAIN&quot;</span><br>  <span class="hljs-attr">outputs:</span><br>    <span class="hljs-attr">IINV64GAIN:</span><br>      <span class="hljs-attr">lookup:</span> [<span class="hljs-string">paras_action</span>]<br>  <span class="hljs-attr">inputs:</span><br>    <span class="hljs-attr">result:</span><span class="hljs-string">&#x27;find.output(&quot;Calibration&quot;, &quot;ReadADCcalfromDSMStoretoPDCA&quot;, &quot;&quot;, &quot;result&quot;)&#x27;</span><br>  <span class="hljs-attr">sequence:</span><br>    <span class="hljs-attr">actions:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">paras_action:</span><br>          <span class="hljs-attr">filename:</span> <span class="hljs-string">RegexGroup.lua</span><br>          <span class="hljs-attr">args:</span><br>            <span class="hljs-string">-</span><span class="hljs-attr">lookup:</span> [<span class="hljs-string">inputs</span>, <span class="hljs-string">result</span>]<br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;i_inv_64_gain=(.*) i_inv_64_offset&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">RunEvalCalculate_action:</span><br>          <span class="hljs-attr">filename:</span> <span class="hljs-string">CalculatePuckADCValue.lua</span><br>          <span class="hljs-attr">args:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">lookup:</span> [<span class="hljs-string">paras_action</span>]<br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">record_action:</span><br>          <span class="hljs-attr">filename:</span> <span class="hljs-string">CreateRecord.lua</span><br>          <span class="hljs-attr">args:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">lookup:</span> [<span class="hljs-string">RunEvalCalculate_action</span>]<br><br><span class="hljs-string">-</span><span class="hljs-comment">#&amp;CALIINV64OFFSET</span><br>  <span class="hljs-attr">technology:</span><span class="hljs-string">Calibration</span><br>  <span class="hljs-attr">coverage:</span><span class="hljs-string">&quot;ReadADCcalfromDSMStoretoPDCA&quot;</span><br>  <span class="hljs-attr">testParameters:</span><span class="hljs-string">&quot;&amp;CALIINV64OFFSET&quot;</span><br>  <span class="hljs-attr">outputs:</span><br>    <span class="hljs-attr">IINV64OFFSET:</span><br>      <span class="hljs-attr">lookup:</span> [<span class="hljs-string">paras_action</span>]<br>  <span class="hljs-attr">inputs:</span><br>    <span class="hljs-attr">result:</span><span class="hljs-string">&#x27;find.output(&quot;Calibration&quot;, &quot;ReadADCcalfromDSMStoretoPDCA&quot;, &quot;&quot;, &quot;result&quot;)&#x27;</span><br>  <span class="hljs-attr">sequence:</span><br>    <span class="hljs-attr">actions:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">paras_action:</span><br>          <span class="hljs-attr">filename:</span> <span class="hljs-string">RegexGroup.lua</span><br>          <span class="hljs-attr">args:</span><br>            <span class="hljs-string">-</span><span class="hljs-attr">lookup:</span> [<span class="hljs-string">inputs</span>, <span class="hljs-string">result</span>]<br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;i_inv_64_offset=(.*) i_inv_16_gain&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">RunEvalCalculate_action:</span><br>          <span class="hljs-attr">filename:</span> <span class="hljs-string">CalculatePuckADCValue.lua</span><br>          <span class="hljs-attr">args:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">lookup:</span> [<span class="hljs-string">paras_action</span>]<br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">record_action:</span><br>          <span class="hljs-attr">filename:</span> <span class="hljs-string">CreateRecord.lua</span><br>          <span class="hljs-attr">args:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">lookup:</span> [<span class="hljs-string">RunEvalCalculate_action</span>]<br><br><span class="hljs-comment">#...omit..</span><br><span class="hljs-comment"># total code line number is 313</span><br><br></code></pre></td></tr></table></figure><p>观察上述代码可以发现 除却第一个配置，后续12个yaml 基本都是重复的，除了<code>testParameters</code> 和 <code>paras_action</code>中第二个参数不一样之外，其他都一样，</p></li><li><p>优化后:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">-</span><span class="hljs-comment">#ReadADCcalfromDSMStoretoPDCA</span><br>  <span class="hljs-attr">technology:</span><span class="hljs-string">Calibration</span><br>  <span class="hljs-attr">coverage:</span><span class="hljs-string">ReadADCcalfromDSMStoretoPDCA</span><br>  <span class="hljs-attr">testParameters:</span><span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">outputs:</span><br>      <span class="hljs-attr">result:</span><br>        <span class="hljs-attr">lookup:</span> [<span class="hljs-string">sendCommand_action</span>]<br>  <span class="hljs-attr">sequence:</span><br>    <span class="hljs-attr">actions:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">sendCommand_action:</span><br>          <span class="hljs-attr">filename:</span> <span class="hljs-string">DutSendCommand.lua</span><br>          <span class="hljs-attr">args:</span><br>            <span class="hljs-string">-</span><span class="hljs-string">&quot;calib adc_get&quot;</span><br><br><span class="hljs-string">-</span><span class="hljs-comment">#FetchCalibrationValue</span><br>  <span class="hljs-attr">technology:</span><span class="hljs-string">Calibration</span><br>  <span class="hljs-attr">coverage:</span><span class="hljs-string">&quot;ReadADCcalfromDSMStoretoPDCA&quot;</span><br>  <span class="hljs-attr">testParameters:</span><span class="hljs-string">&quot;*&quot;</span><br>  <span class="hljs-attr">outputs:</span><br>    <span class="hljs-attr">result:</span><br>      <span class="hljs-attr">lookup:</span> [<span class="hljs-string">paras_action</span>]<br>  <span class="hljs-attr">inputs:</span><br>    <span class="hljs-attr">result:</span><span class="hljs-string">&#x27;find.output(&quot;Calibration&quot;, &quot;ReadADCcalfromDSMStoretoPDCA&quot;, &quot;&quot;, &quot;result&quot;)&#x27;</span><br>    <span class="hljs-attr">category:</span> <span class="hljs-string">testParameters</span><br>  <span class="hljs-attr">sequence:</span><br>    <span class="hljs-attr">actions:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">fecth_Regex_pattern_Action:</span><br>          <span class="hljs-attr">filename:</span> <span class="hljs-string">FetchRegexPattern.lua</span><br>          <span class="hljs-attr">args:</span> <br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">lookup:</span> [<span class="hljs-string">inputs</span>, <span class="hljs-string">category</span>]<br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">paras_action:</span><br>          <span class="hljs-attr">filename:</span> <span class="hljs-string">RegexGroup.lua</span><br>          <span class="hljs-attr">args:</span><br>            <span class="hljs-string">-</span><span class="hljs-attr">lookup:</span> [<span class="hljs-string">inputs</span>, <span class="hljs-string">result</span>]<br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">lookup:</span> [<span class="hljs-string">fecth_Regex_pattern_Action</span>]<br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">RunEvalCalculate_action:</span><br>          <span class="hljs-attr">filename:</span> <span class="hljs-string">CalculatePuckADCValue.lua</span><br>          <span class="hljs-attr">args:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">lookup:</span> [<span class="hljs-string">paras_action</span>]<br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">record_action:</span><br>          <span class="hljs-attr">filename:</span> <span class="hljs-string">CreateRecord.lua</span><br>          <span class="hljs-attr">args:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">lookup:</span> [<span class="hljs-string">RunEvalCalculate_action</span>]<br><span class="hljs-comment"># total line is 43</span><br></code></pre></td></tr></table></figure></li></ul><p>优化之后最直观的表现是 yaml 文件中仅有43行代码；</p><p>优化后的思路是：</p><ul><li><p>将 <code>testParameters</code> 通过参数传入, 观察第 24行代码 <code>category: testParameters</code></p></li><li><p>定义一个方法<code>fecth_Regex_pattern_Action</code>用来获取对应的正则，内部的部分代码如下</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">main</span><span class="hljs-params">(category)</span></span><br>    <span class="hljs-keyword">local</span> pattern = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> category:<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;CALIINV64GAIN&quot;</span>) <span class="hljs-keyword">then</span><br>        pattern = <span class="hljs-string">&quot;i_inv_64_gain=(.*) i_inv_64_offset&quot;</span><br>    <span class="hljs-keyword">elseif</span> category:<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;CALIINV64OFFSET&quot;</span>) <span class="hljs-keyword">then</span><br>        pattern = <span class="hljs-string">&quot;i_inv_64_offset=(.*) i_inv_16_gain&quot;</span><br>    <span class="hljs-keyword">elseif</span> category:<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;CALIINV16GAIN&quot;</span>) <span class="hljs-keyword">then</span><br>        pattern = <span class="hljs-string">&quot;i_inv_16_gain=(.*) i_inv_16_offset&quot;</span><br>    <span class="hljs-comment">-- omit others</span><br>    <span class="hljs-keyword">return</span> pattern<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="2-编译器优化"><a href="#2-编译器优化" class="headerlink" title="2. 编译器优化"></a>2. 编译器优化</h3><p>参考DEMO P158 分支：<code>lx_analyze</code>, <code>HF_before.yaml</code> 和 <code>LF_before.yaml</code> 两个文件是优化之前的，<code>HF.yaml </code>和 <code>LF.yaml </code>是优化之后的</p><ul><li><p>优化前的部分代码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">technology:</span><span class="hljs-string">LF</span><br>  <span class="hljs-attr">coverage:</span>  <span class="hljs-string">CalculateDCEfficiency</span><br>  <span class="hljs-attr">testParameters:</span><span class="hljs-string">&quot;&amp;LF_EFF_21_290mA_DCDC_EFF&quot;</span><br>  <span class="hljs-attr">inputs:</span><br>    <span class="hljs-attr">vrect_fixture:</span> <span class="hljs-string">&#x27;find.output(&quot;Common&quot;, &quot;RecordVrectFixture&quot;, &quot;&amp;LF_EFF_21_290mA_VRECT_FIXTURE&quot;, &quot;vrect_fixture&quot;)&#x27;</span><br>    <span class="hljs-attr">imain_fixture:</span> <span class="hljs-string">&#x27;find.output(&quot;Common&quot;, &quot;RecordImainFixture&quot;, &quot;&amp;LF_EFF_21_290mA_IMAIN_FIXTURE&quot;, &quot;imain_fixture&quot;)&#x27;</span><br>    <span class="hljs-attr">vpwr_adc:</span> <span class="hljs-string">&#x27;find.output(&quot;Common&quot;, &quot;ReadVPWRAdc&quot;, &quot;&amp;LF_EFF_21_290mA_VPWR_ADC&quot;, &quot;vpwr_adc&quot;)&#x27;</span><br>    <span class="hljs-attr">ibus_fixture:</span> <span class="hljs-string">&#x27;find.output(&quot;Common&quot;, &quot;RecordIbusFixture&quot;, &quot;&amp;LF_EFF_21_290mA_IBUS_FIXTURE&quot;, &quot;ibus_fixture&quot;)&#x27;</span><br></code></pre></td></tr></table></figure><p>能够看到<code>inputs</code>的四个参数中，负载值(21_290) 跟<code>testParameters</code><strong>一直。但是Schooner 并没有 参数化传递 <code>&quot;find.output(...)&quot;</code>的方法</strong>，所以这部分ERS循环n次就需要编辑n次,导致冗余代码过多，后期维护修改及其繁琐，而且容易漏改</p></li></ul><p>解决方法: 定制化编译工具. 在 <code>Atlas2/Modules/Schooner/Compiler/Compiler.lua</code> 文件中的<code>function M.checkInputs(testDef, conditionTable, dependentTests)</code> 的方法里添加，我们需要格式化 yaml 参数的部分</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 这个方法是检查 yaml 中Inputs 的信息的</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M.checkInputs</span><span class="hljs-params">(testDef, conditionTable, dependentTests)</span></span><br>    <span class="hljs-comment">-- omit some code</span><br>    <span class="hljs-keyword">elseif</span> inputExpr:<span class="hljs-built_in">match</span>(<span class="hljs-string">&#x27;^find%.output%(.+%)$&#x27;</span>) ~= <span class="hljs-literal">nil</span> <span class="hljs-keyword">then</span><br>        <span class="hljs-keyword">local</span> argsString = inputExpr:<span class="hljs-built_in">match</span>(<span class="hljs-string">&#x27;^find%.output%((.+)%)$&#x27;</span>)<br>        <span class="hljs-keyword">local</span> customComplier = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;ALE.CompilerCustom&#x27;</span>)<br>        argsString = customComplier.transformArgsString(sourceTestDef, argsString)<br>        <span class="hljs-keyword">local</span> dependency = M.parseFindOutput(argsString, sourceTestDef)<br>   <span class="hljs-comment">-- omit some code</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><blockquote><p><code>ALE.CompilerCustom</code> 是我们需要定制化的逻辑，代码如下:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">CompilerCustom.transformArgsString</span><span class="hljs-params">(sourceTestDef, argsString)</span></span><br>    <span class="hljs-comment">-- <span class="hljs-doctag">NOTE:</span> 这个pattern 不能改的!!! 除非跟定义时候一致，否则会出错</span><br>    <span class="hljs-keyword">local</span> pattern = <span class="hljs-string">&quot;&#123;(.-)&#125;&quot;</span><br>  <br>    <span class="hljs-keyword">for</span> matchLogic <span class="hljs-keyword">in</span> argsString:<span class="hljs-built_in">gmatch</span>(pattern) <span class="hljs-keyword">do</span><br><br>        <span class="hljs-keyword">local</span> pattern_tp, duty, load_mA = <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span> ,<span class="hljs-string">&quot;&quot;</span><br><br>        <span class="hljs-keyword">local</span> testParameters = sourceTestDef.testParameters<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">string</span>.<span class="hljs-built_in">find</span>(testParameters, <span class="hljs-string">&quot;&amp;LF_EFF_&quot;</span>) ~= <span class="hljs-literal">nil</span> <span class="hljs-keyword">then</span><br>            pattern_tp = <span class="hljs-string">&quot;_(%d+)_([%d]+)mA&quot;</span><br>        <span class="hljs-keyword">elseif</span> <span class="hljs-built_in">string</span>.<span class="hljs-built_in">find</span>(testParameters, <span class="hljs-string">&quot;&amp;HF_EFF_&quot;</span>) <span class="hljs-keyword">then</span><br>            pattern_tp = <span class="hljs-string">&quot;_(%d+)mV_([%d]+)mA&quot;</span><br>        <span class="hljs-keyword">end</span><br>    <br>        duty, load_mA = sourceTestDef.testParameters:<span class="hljs-built_in">match</span>(pattern_tp)<br>        <span class="hljs-keyword">if</span> matchLogic == <span class="hljs-string">&quot;duty&quot;</span> <span class="hljs-keyword">then</span><br>            argsString = argsString:<span class="hljs-built_in">gsub</span>(<span class="hljs-string">&quot;&#123;duty&#125;&quot;</span>,duty)<br>        <span class="hljs-keyword">elseif</span> matchLogic == <span class="hljs-string">&quot;load&quot;</span> <span class="hljs-keyword">then</span><br>            argsString = argsString:<span class="hljs-built_in">gsub</span>(<span class="hljs-string">&quot;&#123;load&#125;&quot;</span>,load_mA)<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">return</span> argsString<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure></blockquote><p>优化后的yaml文件里的写法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">-</span><span class="hljs-comment">#CalculateDCEfficiency</span><br>  <span class="hljs-attr">technology:</span><span class="hljs-string">LF</span><br>  <span class="hljs-attr">coverage:</span>  <span class="hljs-string">CalculateDCEfficiency</span><br>  <span class="hljs-attr">testParameters:</span><span class="hljs-string">&quot;*&quot;</span><br>  <span class="hljs-attr">inputs:</span><br>    <span class="hljs-attr">vrect_fixture:</span> <span class="hljs-string">&#x27;find.output(&quot;Common&quot;, &quot;RecordVrectFixture&quot;, &quot;&amp;LF_EFF_&#123;duty&#125;_&#123;load&#125;mA_VRECT_FIXTURE&quot;, &quot;vrect_fixture&quot;)&#x27;</span><br>    <span class="hljs-attr">imain_fixture:</span> <span class="hljs-string">&#x27;find.output(&quot;Common&quot;, &quot;RecordImainFixture&quot;, &quot;&amp;LF_EFF_&#123;duty&#125;_&#123;load&#125;mA_IMAIN_FIXTURE&quot;, &quot;imain_fixture&quot;)&#x27;</span><br>    <span class="hljs-attr">vpwr_adc:</span> <span class="hljs-string">&#x27;find.output(&quot;Common&quot;, &quot;ReadVPWRAdc&quot;, &quot;&amp;LF_EFF_&#123;duty&#125;_&#123;load&#125;mA_VPWR_ADC&quot;, &quot;vpwr_adc&quot;)&#x27;</span><br>    <span class="hljs-attr">ibus_fixture:</span> <span class="hljs-string">&#x27;find.output(&quot;Common&quot;, &quot;RecordIbusFixture&quot;, &quot;&amp;LF_EFF_&#123;duty&#125;_&#123;load&#125;mA_IBUS_FIXTURE&quot;, &quot;ibus_fixture&quot;)&#x27;</span><br></code></pre></td></tr></table></figure><p>因此，后续就不惧ERS如何更新。</p><hr><p>综上，用程式生成的CSV和Ymal的输入参数格式化，在ERS繁多的情况下，会大大提升开发效率。</p>]]></content>
    
    
    <categories>
      
      <category>DevelopmentTool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dev</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安装不同Atlas版本的注意事项</title>
    <link href="/2024/05/15/008personal/Dev002/"/>
    <url>/2024/05/15/008personal/Dev002/</url>
    
    <content type="html"><![CDATA[<ul><li><p>安装包需要使用<code>unpkg</code> 解包 安装文件，并获取对应的 UI，Record,Menu的三个软件</p></li><li><p>安装完成之后，执行下面的脚本，启动<br><code>/usr/local/Atlas/activate.sh</code></p></li><li><p>配置 station.plist</p></li><li></li></ul>]]></content>
    
    
    <categories>
      
      <category>DevelopmentTool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dev</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lua-字符串操作</title>
    <link href="/2024/05/11/004lua/lua-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/"/>
    <url>/2024/05/11/004lua/lua-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.lua.org/manual/5.4/manual.html#6.4">参考链接</a></p><p>以下几点需要注意</p><ul><li>Index begin with 1, when indexing a string</li><li>negative value is allowed and that’s mean from the end of the string</li></ul></blockquote><h2 id="string-format-formatstring-···"><a href="#string-format-formatstring-···" class="headerlink" title="string.format (formatstring, ···)"></a>string.format (formatstring, ···)</h2><p><code>string.format(formatstring, ...)</code> 是 Lua 中用于格式化字符串的函数。它接受一个格式化字符串 <code>formatstring</code> 和一系列参数 <code>...</code>，并返回根据格式化字符串生成的字符串。</p><p><code>formatstring</code> 是一个包含转换说明符的字符串，用于指定输出字符串的格式。转换说明符由百分号（%）开头，后面跟着一个或多个字符，用于指定要格式化的数据类型和格式。</p><p>以下是一些常见的转换说明符：</p><ul><li><code>%s</code>: 格式化一个字符串参数。</li><li><code>%d</code> 或 <code>%i</code>: 格式化一个带符号的十进制整数参数。</li><li><code>%f</code>: 格式化一个浮点数参数。</li><li><code>%c</code>: 格式化一个字符参数。</li><li><code>%x</code> 或 <code>%X</code>: 格式化一个十六进制整数参数，小写或大写字母表示。</li></ul><p>示例使用：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 格式化字符串</span><br><span class="hljs-keyword">local</span> formatted_str = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;Hello, %s! You are %d years old.&quot;</span>, <span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-number">30</span>)<br><span class="hljs-built_in">print</span>(formatted_str)  <span class="hljs-comment">-- Output: Hello, Alice! You are 30 years old.</span><br><br><span class="hljs-comment">-- 使用多个参数进行格式化</span><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">pi</span> = <span class="hljs-number">3.14159</span><br><span class="hljs-keyword">local</span> radius = <span class="hljs-number">5</span><br><span class="hljs-keyword">local</span> area = <span class="hljs-built_in">pi</span> * radius * radius<br><span class="hljs-keyword">local</span> formatted_area = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;The area of a circle with radius %.2f is %.2f&quot;</span>, radius, area)<br><span class="hljs-built_in">print</span>(formatted_area)  <span class="hljs-comment">-- Output: The area of a circle with radius 5.00 is 78.54</span><br></code></pre></td></tr></table></figure><p>在这个示例中，我们使用了 <code>string.format</code> 函数来生成格式化的字符串。第一个例子中，我们使用了 <code>%s</code> 和 <code>%d</code> 转换说明符来格式化字符串和整数。第二个例子中，我们使用了 <code>%f</code> 转换说明符来格式化浮点数，并指定了保留两位小数的格式。</p><h2 id="string-byte-转成ASCII"><a href="#string-byte-转成ASCII" class="headerlink" title="string.byte - 转成ASCII"></a>string.byte - 转成ASCII</h2><p><code>string.byte</code> 是 Lua 中用于获取字符串中指定位置的字符的 ASCII 码值的函数。它可以接受一个字符串和一个可选的起始位置作为参数，并返回指定位置处字符的 ASCII 码值。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">string</span>.<span class="hljs-built_in">byte</span>(s [, i [, j]])<br></code></pre></td></tr></table></figure><ul><li><code>s</code>：要获取字符的字符串。</li><li><code>i</code>（可选）：起始位置，默认为 1。</li><li><code>j</code>（可选）：结束位置，默认为 <code>i</code>。</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> str = <span class="hljs-string">&quot;Hello, Lua!&quot;</span><br><span class="hljs-keyword">local</span> byte1 = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">byte</span>(str, <span class="hljs-number">1</span>)  <span class="hljs-comment">-- 获取第一个字符的 ASCII 码值</span><br><span class="hljs-built_in">print</span>(byte1)  <span class="hljs-comment">-- Output: 72</span><br><span class="hljs-keyword">local</span> byte5 = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">byte</span>(str, <span class="hljs-number">5</span>)  <span class="hljs-comment">-- 获取第五个字符的 ASCII 码值</span><br><span class="hljs-built_in">print</span>(byte5)  <span class="hljs-comment">-- Output: 111</span><br></code></pre></td></tr></table></figure><p>在示例中，字符串 “Hello, Lua!” 中的第一个字符是 ‘H’，其 ASCII 码值是 72，而第五个字符是 ‘o’，其 ASCII 码值是 111。</p><p>如果不指定 <code>i</code> 和 <code>j</code> 参数，则默认获取第一个字符的 ASCII 码值。如果字符串为空或 <code>i</code> 大于字符串长度，则返回 <code>nil</code>。</p><h2 id="string-char-···-ASCII转字符串"><a href="#string-char-···-ASCII转字符串" class="headerlink" title="string.char (···)  ASCII转字符串"></a>string.char (···)  ASCII转字符串</h2><p><code>string.char</code> 函数用于将 ASCII 码值转换为对应的字符。它可以接受一个或多个整数参数，并返回这些整数对应的字符组成的字符串。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">string</span>.<span class="hljs-built_in">char</span>(n1, n2, ...)<br></code></pre></td></tr></table></figure><ul><li><code>n1</code>, <code>n2</code>, …：要转换为字符的整数值。</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> char1 = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">char</span>(<span class="hljs-number">72</span>)  <span class="hljs-comment">-- 将 ASCII 码值 72 转换为字符</span><br><span class="hljs-built_in">print</span>(char1)  <span class="hljs-comment">-- Output: H</span><br><br><span class="hljs-keyword">local</span> char2 = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">char</span>(<span class="hljs-number">65</span>, <span class="hljs-number">66</span>, <span class="hljs-number">67</span>)  <span class="hljs-comment">-- 将 ASCII 码值 65, 66, 67 转换为字符</span><br><span class="hljs-built_in">print</span>(char2)  <span class="hljs-comment">-- Output: ABC</span><br></code></pre></td></tr></table></figure><p>在示例中，<code>string.char(72)</code> 将 ASCII 码值 72 转换为字符 ‘H’，而 <code>string.char(65, 66, 67)</code> 将 ASCII 码值 65、66 和 67 转换为字符 ‘A’、’B’ 和 ‘C’ 组成的字符串。</p><p>如果参数不是整数，<code>string.char</code> 将会将其转换为整数后再进行处理。超出 ASCII 码范围的值会被模 256 处理，因此 ASCII 码值的有效范围是 0 到 255。</p><h2 id="string-dump-function-strip"><a href="#string-dump-function-strip" class="headerlink" title="string.dump (function [, strip])"></a>string.dump (function [, strip])</h2><p><code>string.dump(function [, strip])</code> 是 Lua 中的一个函数，用于将指定函数编译为二进制代码的字符串表示形式。</p><ul><li><code>function</code>: 要编译的 Lua 函数。</li><li><code>strip</code>（可选参数）：布尔值，表示是否剔除调试信息。如果为 <code>true</code>，则编译的二进制代码中将不包含调试信息，使得生成的二进制代码更加紧凑。默认为 <code>false</code>，即保留调试信息。</li></ul><p>示例使用：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 定义一个简单的 Lua 函数</span><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span><span class="hljs-params">(a, b)</span></span><br>    <span class="hljs-keyword">return</span> a + b<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- 将函数编译为二进制代码的字符串表示形式</span><br><span class="hljs-keyword">local</span> binary_str = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">dump</span>(add)<br><br><span class="hljs-comment">-- 输出编译后的二进制代码字符串</span><br><span class="hljs-built_in">print</span>(binary_str)<br></code></pre></td></tr></table></figure><p>这样就会打印出编译后的二进制代码的字符串表示形式。需要注意的是，<code>string.dump</code> 函数会将函数编译为与 Lua 版本相关的二进制代码格式，因此生成的二进制代码字符串可能不可移植，只能在相同 Lua 版本之间使用。</p><blockquote><p>如何使用呢?</p><p>使用 <code>string.dump</code> 函数的主要目的是将 Lua 函数编译为二进制代码字符串，然后可以将这个字符串保存到文件中或通过网络传输，并在需要时重新加载这个函数。这在某些情况下可能会有用，比如需要在不同的 Lua 环境之间传递函数，或者需要对函数进行加密以保护知识产权。</p><p>下面是一个简单的示例，演示了如何使用 <code>string.dump</code> 函数：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 定义一个简单的 Lua 函数</span><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span><span class="hljs-params">(a, b)</span></span><br>    <span class="hljs-keyword">return</span> a + b<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- 将函数编译为二进制代码的字符串表示形式</span><br><span class="hljs-keyword">local</span> binary_str = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">dump</span>(add)<br><br><span class="hljs-comment">-- 保存二进制代码字符串到文件</span><br><span class="hljs-keyword">local</span> file = <span class="hljs-built_in">io</span>.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;compiled_function.bin&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>)<br>file:<span class="hljs-built_in">write</span>(binary_str)<br>file:<span class="hljs-built_in">close</span>()<br><br><span class="hljs-comment">-- 从文件中加载二进制代码字符串并恢复为函数</span><br>file = <span class="hljs-built_in">io</span>.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;compiled_function.bin&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>)<br><span class="hljs-keyword">local</span> loaded_binary_str = file:<span class="hljs-built_in">read</span>(<span class="hljs-string">&quot;*all&quot;</span>)<br>file:<span class="hljs-built_in">close</span>()<br><br><span class="hljs-comment">-- 加载二进制代码字符串并将其转换为函数</span><br><span class="hljs-keyword">local</span> loaded_function = <span class="hljs-built_in">load</span>(loaded_binary_str)<br><br><span class="hljs-comment">-- 调用恢复的函数</span><br><span class="hljs-keyword">local</span> result = loaded_function(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>)<br><span class="hljs-built_in">print</span>(result)  <span class="hljs-comment">-- Output: 30</span><br></code></pre></td></tr></table></figure><p>在这个示例中，我们首先定义了一个名为 <code>add</code> 的简单 Lua 函数。然后，使用 <code>string.dump</code> 函数将这个函数编译为二进制代码的字符串表示形式，并将其保存到文件 <code>&quot;compiled_function.bin&quot;</code> 中。接着，我们从文件中读取这个二进制代码字符串，并使用 <code>load</code> 函数将其加载为函数。最后，我们调用恢复的函数，并传入参数进行计算。</p><p>需要注意的是，<code>load</code> 函数加载的函数是匿名函数，因此我们将其赋值给一个变量以便后续调用。此外，加载的函数可能不会保留原始函数的上值（upvalues），因此在实际使用中需要注意。</p></blockquote><h2 id="string-find-s-pattern-init-plain"><a href="#string-find-s-pattern-init-plain" class="headerlink" title="string.find (s, pattern [, init [, plain]])"></a>string.find (s, pattern [, init [, plain]])</h2><p><code>string.find(s, pattern [, init [, plain]])</code> 是 Lua 中用于在字符串 <code>s</code> 中查找匹配 <code>pattern</code> 的模式的函数。它返回匹配的起始索引和结束索引（如果找到了），如果未找到匹配，则返回 <code>nil</code>。</p><ul><li><code>s</code>: 要搜索的目标字符串。</li><li><code>pattern</code>: 要匹配的模式字符串。</li><li><code>init</code>（可选参数）: 起始搜索位置，默认为 1。如果指定了 <code>init</code>，<code>find</code> 将从指定位置开始搜索。</li><li><code>plain</code>（可选参数）: 布尔值，表示是否关闭模式匹配。如果为 <code>true</code>，则会关闭模式匹配，<code>pattern</code> 将被视为普通字符串而非模式。默认为 <code>false</code>，即启用模式匹配。</li></ul><p>示例使用：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> s = <span class="hljs-string">&quot;Hello, Lua!&quot;</span><br><span class="hljs-keyword">local</span> pattern = <span class="hljs-string">&quot;Lua&quot;</span><br><br><span class="hljs-comment">-- 在字符串 s 中查找模式 pattern</span><br><span class="hljs-keyword">local</span> start, finish = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">find</span>(s, pattern)<br><br><span class="hljs-keyword">if</span> start <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Pattern found at position:&quot;</span>, start, <span class="hljs-string">&quot;-&quot;</span>, finish)<br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Pattern not found.&quot;</span>)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>这个示例中，字符串 <code>s</code> 中的模式 <code>&quot;Lua&quot;</code> 被查找。如果找到了，则打印出匹配的起始和结束索引，否则打印 <code>&quot;Pattern not found.&quot;</code>。</p><h2 id="string-gmatch-s-pattern-init"><a href="#string-gmatch-s-pattern-init" class="headerlink" title="string.gmatch (s, pattern [, init])"></a>string.gmatch (s, pattern [, init])</h2><p><code>string.gmatch(s, pattern [, init])</code> 是 Lua 中用于迭代匹配字符串中所有模式的函数。它返回一个迭代器函数，每次调用都会返回下一个匹配项的位置和值，直到没有匹配项为止。</p><ul><li><code>s</code>: 要搜索的目标字符串。</li><li><code>pattern</code>: 要匹配的模式字符串。</li><li><code>init</code>（可选参数）: 起始搜索位置，默认为 1。如果提供了 <code>init</code> 参数，<code>gmatch</code> 将从指定位置开始搜索。</li></ul><p>示例使用：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> s = <span class="hljs-string">&quot;Lua is a powerful scripting language.&quot;</span><br><span class="hljs-keyword">local</span> pattern = <span class="hljs-string">&quot;%a+&quot;</span><br><br><span class="hljs-comment">-- 使用 gmatch 迭代匹配所有单词</span><br><span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> <span class="hljs-built_in">string</span>.<span class="hljs-built_in">gmatch</span>(s, pattern) <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">print</span>(word)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- Output:</span><br><span class="hljs-comment">-- Lua</span><br><span class="hljs-comment">-- is</span><br><span class="hljs-comment">-- a</span><br><span class="hljs-comment">-- powerful</span><br><span class="hljs-comment">-- scripting</span><br><span class="hljs-comment">-- language</span><br></code></pre></td></tr></table></figure><p>在这个示例中，我们使用 <code>string.gmatch</code> 函数迭代匹配字符串 <code>s</code> 中的所有单词。模式 <code>&quot;%a+&quot;</code> 匹配一个或多个字母字符。每次迭代，迭代器函数返回下一个匹配的单词，直到没有更多匹配项为止。</p><h2 id="string-gsub-s-pattern-repl-n"><a href="#string-gsub-s-pattern-repl-n" class="headerlink" title="string.gsub (s, pattern, repl [, n])"></a>string.gsub (s, pattern, repl [, n])</h2><p><code>string.gsub(s, pattern, repl [, n])</code> 是 Lua 中用于全局替换字符串中模式匹配项的函数。它返回一个新的字符串，其中所有匹配模式 <code>pattern</code> 的子串都被替换为 <code>repl</code>。</p><ul><li><code>s</code>: 要进行替换操作的目标字符串。</li><li><code>pattern</code>: 要匹配的模式字符串。</li><li><code>repl</code>: 替换字符串。可以是一个字符串或一个函数。</li><li><code>n</code>（可选参数）: 最多替换的次数。如果提供了 <code>n</code>，则只替换前 <code>n</code> 个匹配项。默认情况下，所有匹配项都会被替换。</li></ul><p>如果 <code>repl</code> 是一个字符串，则它会简单地替换匹配的子串。如果 <code>repl</code> 是一个函数，则在每次匹配时调用该函数，将匹配的子串作为参数传递给它，然后用它的返回值替换匹配的子串。</p><p>示例使用：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> s = <span class="hljs-string">&quot;Lua is a powerful scripting language. Lua is fun!&quot;</span><br><span class="hljs-keyword">local</span> pattern = <span class="hljs-string">&quot;Lua&quot;</span><br><span class="hljs-keyword">local</span> repl = <span class="hljs-string">&quot;Python&quot;</span><br><br><span class="hljs-comment">-- 全局替换所有匹配项</span><br><span class="hljs-keyword">local</span> replaced_str = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">gsub</span>(s, pattern, repl)<br><span class="hljs-built_in">print</span>(replaced_str)<br><span class="hljs-comment">-- Output: Python is a powerful scripting language. Python is fun!</span><br><br><span class="hljs-comment">-- 替换前两个匹配项</span><br><span class="hljs-keyword">local</span> replaced_str_limit = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">gsub</span>(s, pattern, repl, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(replaced_str_limit)<br><span class="hljs-comment">-- Output: Python is a powerful scripting language. Lua is fun!</span><br><br><span class="hljs-comment">-- 使用函数替换匹配项</span><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upper_replace</span><span class="hljs-params">(match)</span></span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">match</span>:<span class="hljs-built_in">upper</span>()<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">local</span> replaced_func_str = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">gsub</span>(s, pattern, upper_replace)<br><span class="hljs-built_in">print</span>(replaced_func_str)<br><span class="hljs-comment">-- Output: LUA is a powerful scripting language. LUA is fun!</span><br></code></pre></td></tr></table></figure><p>在这个示例中，我们使用了 <code>string.gsub</code> 函数来对字符串 <code>s</code> 进行全局替换。首先，我们简单地将所有匹配的 “Lua” 替换为 “Python”。然后，我们限制替换前两个匹配项。最后，我们使用一个函数将匹配的子串转换为大写。</p><h2 id="string-len-s"><a href="#string-len-s" class="headerlink" title="string.len (s)"></a>string.len (s)</h2><p><code>string.len(s)</code> 是 Lua 中用于获取字符串长度的函数。它返回字符串 <code>s</code> 的长度，即其中包含的字符数（不包括末尾的空字符）。</p><ul><li><code>s</code>: 要获取长度的字符串。</li></ul><p>示例使用：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> s = <span class="hljs-string">&quot;Hello, Lua!&quot;</span><br><span class="hljs-keyword">local</span> length = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">len</span>(s)<br><span class="hljs-built_in">print</span>(length)  <span class="hljs-comment">-- Output: 12</span><br></code></pre></td></tr></table></figure><p>在这个示例中，字符串 “Hello, Lua!” 包含 12 个字符，因此调用 <code>string.len(s)</code> 返回 12。</p><h2 id="string-lower-s"><a href="#string-lower-s" class="headerlink" title="string.lower (s)"></a>string.lower (s)</h2><p><code>string.lower(s)</code> 是 Lua 中用于将字符串转换为小写形式的函数。它返回字符串 <code>s</code> 的小写形式。</p><ul><li><code>s</code>: 要转换为小写的字符串。</li></ul><p>示例使用：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> s = <span class="hljs-string">&quot;Hello, Lua!&quot;</span><br><span class="hljs-keyword">local</span> lower_str = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">lower</span>(s)<br><span class="hljs-built_in">print</span>(lower_str)  <span class="hljs-comment">-- Output: hello, lua!</span><br></code></pre></td></tr></table></figure><p>在这个示例中，字符串 “Hello, Lua!” 被转换为小写形式，并输出结果。</p><h2 id="string-match-s-pattern-init"><a href="#string-match-s-pattern-init" class="headerlink" title="string.match (s, pattern [, init])"></a>string.match (s, pattern [, init])</h2><p><code>string.match(s, pattern [, init])</code> 是 Lua 中用于从字符串中查找第一个匹配模式的函数。它返回字符串 <code>s</code> 中第一个匹配模式 <code>pattern</code> 的子串，如果未找到匹配，则返回 <code>nil</code>。</p><ul><li><code>s</code>: 要搜索的目标字符串。</li><li><code>pattern</code>: 要匹配的模式字符串。</li><li><code>init</code>（可选参数）: 起始搜索位置，默认为 1。如果提供了 <code>init</code> 参数，<code>match</code> 将从指定位置开始搜索。</li></ul><p>示例使用：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> s = <span class="hljs-string">&quot;The quick brown fox jumps over the lazy dog.&quot;</span><br><span class="hljs-keyword">local</span> pattern = <span class="hljs-string">&quot;%a+&quot;</span><br><br><span class="hljs-comment">-- 匹配第一个单词</span><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">match</span> = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">match</span>(s, pattern)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">match</span>)  <span class="hljs-comment">-- Output: The</span><br><br><span class="hljs-comment">-- 从第10个字符开始匹配</span><br><span class="hljs-keyword">local</span> match_init = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">match</span>(s, pattern, <span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(match_init)  <span class="hljs-comment">-- Output: brown</span><br></code></pre></td></tr></table></figure><p>在这个示例中，我们使用 <code>string.match</code> 函数从字符串 <code>s</code> 中查找第一个匹配模式 <code>%a+</code> 的子串，这个模式匹配一个或多个字母字符。第一个调用返回字符串的第一个单词 “The”，而第二个调用从第 10 个字符开始搜索并返回第二个单词 “brown”。</p><h2 id="string-sub-s-i-j"><a href="#string-sub-s-i-j" class="headerlink" title="string.sub (s, i [, j])"></a>string.sub (s, i [, j])</h2><p><code>string.sub</code> 是 Lua 中一个用于截取字符串的函数。它的详细用法如下：</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">string</span>.<span class="hljs-built_in">sub</span>(s, i [, j])<br></code></pre></td></tr></table></figure><ul><li><code>s</code>：要操作的字符串。</li><li><code>i</code>：截取的起始位置（包含）。</li><li><code>j</code>：（可选）截取的结束位置（包含），如果省略，则默认为字符串的末尾。</li></ul><h3 id="参数细节"><a href="#参数细节" class="headerlink" title="参数细节"></a>参数细节</h3><ul><li>**起始位置 <code>i</code>**：可以是正数或负数。<ul><li>正数表示从字符串的第 <code>i</code> 个字符开始。</li><li>负数表示从字符串的倒数第 <code>|i|</code> 个字符开始。</li></ul></li><li>**结束位置 <code>j</code>**：可以是正数或负数。<ul><li>正数表示到字符串的第 <code>j</code> 个字符结束。</li><li>负数表示到字符串的倒数第 <code>|j|</code> 个字符结束。</li><li>如果省略 <code>j</code>，则表示到字符串的末尾。</li></ul></li></ul><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><ul><li>返回一个新的字符串，它是从位置 <code>i</code> 到 <code>j</code> 之间的子串（包括 <code>i</code> 和 <code>j</code>）。</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>以下是一些示例来说明 <code>string.sub</code> 的用法：</p><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> s = <span class="hljs-string">&quot;Hello, World!&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">string</span>.<span class="hljs-built_in">sub</span>(s, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>))  <span class="hljs-comment">-- 输出: Hello</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">string</span>.<span class="hljs-built_in">sub</span>(s, <span class="hljs-number">8</span>))     <span class="hljs-comment">-- 输出: World!</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">string</span>.<span class="hljs-built_in">sub</span>(s, <span class="hljs-number">-6</span>, <span class="hljs-number">-2</span>))<span class="hljs-comment">-- 输出: World</span><br></code></pre></td></tr></table></figure><h4 id="使用正数索引"><a href="#使用正数索引" class="headerlink" title="使用正数索引"></a>使用正数索引</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> s = <span class="hljs-string">&quot;abcdef&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">string</span>.<span class="hljs-built_in">sub</span>(s, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>))  <span class="hljs-comment">-- 输出: bcd</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">string</span>.<span class="hljs-built_in">sub</span>(s, <span class="hljs-number">3</span>))     <span class="hljs-comment">-- 输出: cdef</span><br></code></pre></td></tr></table></figure><h4 id="使用负数索引"><a href="#使用负数索引" class="headerlink" title="使用负数索引"></a>使用负数索引</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> s = <span class="hljs-string">&quot;abcdef&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">string</span>.<span class="hljs-built_in">sub</span>(s, <span class="hljs-number">-4</span>, <span class="hljs-number">-2</span>))<span class="hljs-comment">-- 输出: cde</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">string</span>.<span class="hljs-built_in">sub</span>(s, <span class="hljs-number">-3</span>))    <span class="hljs-comment">-- 输出: def</span><br></code></pre></td></tr></table></figure><h4 id="省略-j-参数"><a href="#省略-j-参数" class="headerlink" title="省略 j 参数"></a>省略 <code>j</code> 参数</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> s = <span class="hljs-string">&quot;abcdef&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">string</span>.<span class="hljs-built_in">sub</span>(s, <span class="hljs-number">3</span>))     <span class="hljs-comment">-- 输出: cdef</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">string</span>.<span class="hljs-built_in">sub</span>(s, <span class="hljs-number">-3</span>))    <span class="hljs-comment">-- 输出: def</span><br></code></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>索引 <code>i</code> 和 <code>j</code> 是从 1 开始的，而不是从 0 开始（这是与某些其他编程语言的区别）。</li><li>如果 <code>i</code> 或 <code>j</code> 超出字符串的范围，Lua 不会报错，而是会尽可能地返回有效的子串。</li></ul><p>通过这些示例和说明，可以更清楚地理解 <code>string.sub</code> 的用法及其在字符串操作中的强大功能。</p><p>&#x2F;&#x2F; TODO @lingxiao </p><ol><li>lua 中 Patterns 的应用</li></ol>]]></content>
    
    
    <categories>
      
      <category>Lua</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tools</tag>
      
      <tag>lua</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git 通过 SSH Clone,Push 和 Pull 事宜</title>
    <link href="/2024/05/10/003tools/003_Git/"/>
    <url>/2024/05/10/003tools/003_Git/</url>
    
    <content type="html"><![CDATA[<h3 id="解决：通过SSH方式-clone-的code-每次提交都需要输入rsa的密码"><a href="#解决：通过SSH方式-clone-的code-每次提交都需要输入rsa的密码" class="headerlink" title="解决：通过SSH方式 clone 的code,每次提交都需要输入rsa的密码"></a>解决：通过SSH方式 clone 的code,每次提交都需要输入rsa的密码</h3><h4 id="MacOS在-每一次-git-push-的时候-Enter-passphrase-for-key-‘-Users-lingxiao-ssh-id-rsa’-都需要输入密码，如何只输入一次，在下一次push-的时候-就直接读取缓存"><a href="#MacOS在-每一次-git-push-的时候-Enter-passphrase-for-key-‘-Users-lingxiao-ssh-id-rsa’-都需要输入密码，如何只输入一次，在下一次push-的时候-就直接读取缓存" class="headerlink" title="MacOS在 每一次 git push 的时候 Enter passphrase for key ‘&#x2F;Users&#x2F;lingxiao&#x2F;.ssh&#x2F;id_rsa’:   都需要输入密码，如何只输入一次，在下一次push 的时候 就直接读取缓存"></a>MacOS在 每一次 git push 的时候 Enter passphrase for key ‘&#x2F;Users&#x2F;lingxiao&#x2F;.ssh&#x2F;id_rsa’:   都需要输入密码，如何只输入一次，在下一次push 的时候 就直接读取缓存</h4><blockquote><p>可以使用ssh-agent来管理你的SSH密钥并将其缓存在内存中，以避免每次都需要输入密码。以下是在macOS上设置ssh-agent的步骤：</p></blockquote><blockquote><ul><li>启动ssh-agent：打开终端，并运行以下命令：</li></ul></blockquote><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(ssh-agent -s)</span>&quot;</span><br></code></pre></td></tr></table></figure></blockquote><blockquote><ul><li>添加你的SSH私钥到ssh-agent中：<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">ssh-<span class="hljs-keyword">add</span><span class="language-bash"> ~/.ssh/id_rsa </span><br></code></pre></td></tr></table></figure></li></ul></blockquote><blockquote><p>如果你的私钥不是默认的id_rsa，请将上面的命令中的id_rsa替换为你的私钥文件名。</p></blockquote><blockquote><p>输入你的SSH私钥密码。</p></blockquote><blockquote><p>现在，你的SSH私钥已经添加到了ssh-agent中，并且密码已经被缓存。你可以尝试进行git push操作，应该不再需要输入密码了。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xcode13 之后显示 Products 目录</title>
    <link href="/2024/05/10/003tools/002_Xcode/"/>
    <url>/2024/05/10/003tools/002_Xcode/</url>
    
    <content type="html"><![CDATA[<ul><li>进入目录</li></ul><p><img src="/img/003tools_3.png" alt="alt text"></p><ul><li>打开如下文件<code>project.pbxproj</code></li></ul><p><img src="/img/003tools_1.png" alt="alt text"></p><ul><li>搜索 <code>productRefGroup</code> key</li></ul><p><img src="/img/003tools_2.png" alt="alt text"></p><blockquote><p>如果搜索的内容有多个选项 记得匹配后面备注为 <code>/* Products */</code><br>将 productRefGroup 对应的value 设置为mainGroup 的值</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Schooner注意点</title>
    <link href="/2024/05/08/008personal/Dev001/"/>
    <url>/2024/05/08/008personal/Dev001/</url>
    
    <content type="html"><![CDATA[<p>Technology, Coverage, and TestParameters columns<br>这三者的组合称为一个测试项，NOTE: 必须唯一</p><hr><p>当前情况下，如果要在limits.csv 里设置 condition，那么condition必须在Init和Group的阶段</p><p>Orphaned Records<br>表示 Limit Table 中没有 匹配到对应的 测试项</p><hr>]]></content>
    
    
    <categories>
      
      <category>DevelopmentTool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dev</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unix Files And Dirs Managements</title>
    <link href="/2024/02/21/007unix_shell/Unix-Files-And-Dirs-Managements/"/>
    <url>/2024/02/21/007unix_shell/Unix-Files-And-Dirs-Managements/</url>
    
    <content type="html"><![CDATA[<h3 id="赋值文件以及文件夹的指令"><a href="#赋值文件以及文件夹的指令" class="headerlink" title="赋值文件以及文件夹的指令"></a>赋值文件以及文件夹的指令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cp</span> -r -v <span class="hljs-string">&quot;<span class="hljs-variable">$source_file</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$destination_dir</span>&quot;</span><br></code></pre></td></tr></table></figure><h3 id="File-Management"><a href="#File-Management" class="headerlink" title="File Management"></a>File Management</h3><blockquote><p><a href="https://www.tutorialspoint.com/unix/unix-file-management.htm">参考链接</a></p></blockquote><h4 id="查看文件列表："><a href="#查看文件列表：" class="headerlink" title="查看文件列表："></a>查看文件列表：</h4><h5 id="ls-l"><a href="#ls-l" class="headerlink" title="ls -l"></a>ls -l</h5><blockquote><p><code>-l</code>:  long format</p></blockquote><p><img src="https://raw.githubusercontent.com/JackieDai/blogAssets/main/202402210937910.png"></p><blockquote><p>执行命令 ls -l 后，返回的  total 表示目录中所有文件的总块数。这里的 “块” 指的是文件系统中的分配单位,但它并不反映具体文件的大小.</p><p>First Column 表示文件类型和权限。</p><p>Second Col 表示内存分配的“块”</p><p>Third Col表示文件拥有者</p><p>Fourth Col 表示 角色</p><p>Fifth Col 表示 文件大小</p><p>Sixth Col表示时间日期</p><p>Seventh Col表示文件名&#x2F;目录</p></blockquote><h5 id="ls-a"><a href="#ls-a" class="headerlink" title="ls -a"></a>ls -a</h5><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">$ <span class="hljs-keyword">ls</span> -a<br>.<span class="hljs-string">.DS_Store</span>PracticesTutorial.md<br><span class="hljs-string">..</span><span class="hljs-string">.git</span>README.md<br></code></pre></td></tr></table></figure><blockquote><p>在执行 <code>ls -a</code> 命令后，会显示包括隐藏文件和目录在内的所有文件和目录。在结果中，你可能会看到以下三个条目：</p><ol><li><p><strong>.DS_Store</strong>: 这是 macOS 操作系统中的一个隐藏文件，用于存储与该目录相关的自定义属性和显示选项。它通常用于存储文件夹的自定义图标和排列方式等信息。</p></li><li><p><strong>. (单个点)</strong>: 这代表当前目录。在类Unix操作系统中，单个点表示当前工作目录。</p></li><li><p><strong>.. (双点)</strong>: 这代表上一级目录。在类Unix操作系统中，双点表示当前工作目录的父目录。</p></li></ol><p>这些条目通常是系统生成或维护的，一般用户在正常操作中不需要直接处理它们。在使用 <code>ls -a</code> 查看目录内容时，这些隐藏文件和目录也会被列出。</p></blockquote><h4 id="创建编辑文件"><a href="#创建编辑文件" class="headerlink" title="创建编辑文件"></a>创建编辑文件</h4><h5 id="vi-vim"><a href="#vi-vim" class="headerlink" title="vi&#x2F;vim"></a>vi&#x2F;vim</h5><blockquote><p>ESC : 退出编辑模式</p><p>在退出编辑模式时，可以通过（<code>I:right</code>;<code>h:left</code>,<code>k:up</code>;<code>j:down</code>）方向来移动光标</p><p>退出编辑模式有两种方法</p><pre><code class="hljs">1. ESC -- Shit+ZZ1. ESC -- wq</code></pre></blockquote><h4 id="显示文件内容"><a href="#显示文件内容" class="headerlink" title="显示文件内容"></a>显示文件内容</h4><h5 id="cat-filename"><a href="#cat-filename" class="headerlink" title="cat filename"></a>cat filename</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">$ cat file_one.txt <br><span class="hljs-keyword">this</span> result <span class="hljs-keyword">is</span> the execution of  vi cmd <br></code></pre></td></tr></table></figure><p>如果要显示行数 添加<code>-b</code> 选项</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">cat -b file_one.txt<br><span class="hljs-number">1</span><span class="hljs-keyword">this</span> result <span class="hljs-keyword">is</span> the execution of  vi cmd<br></code></pre></td></tr></table></figure><h4 id="统计文件单词数量"><a href="#统计文件单词数量" class="headerlink" title="统计文件单词数量"></a>统计文件单词数量</h4><h5 id="wc-filename"><a href="#wc-filename" class="headerlink" title="wc filename"></a>wc filename</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">wc</span> file_one.txt</span> <br>1       8      41 file_one.txt<br></code></pre></td></tr></table></figure><blockquote><p>1th Col: 总行数o</p><p>2th Col:总单词数量</p><p>3th Col:文件大小</p><p>4th Col： filename</p></blockquote><h4 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h4><h5 id="cp-source-file-destination-file"><a href="#cp-source-file-destination-file" class="headerlink" title="cp source_file destination_file"></a>cp source_file destination_file</h5><p>执行西面的命令</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-keyword">cp</span> file_one.txt file_one_copy.txt<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/JackieDai/blogAssets/main/202402211031094.png"></p><h4 id="重命名文件"><a href="#重命名文件" class="headerlink" title="重命名文件"></a>重命名文件</h4><h5 id="mvold-filenew-file"><a href="#mvold-filenew-file" class="headerlink" title="mvold_filenew_file"></a>mvold_filenew_file</h5><p>改变之前文件</p><p><img src="https://raw.githubusercontent.com/JackieDai/blogAssets/main/202402211043220.png"></p><p>执行命令之后</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">mv</span> file_one.txt file_altered.txt<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/JackieDai/blogAssets/main/202402211044991.png"></p><h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><h5 id="rm-filename"><a href="#rm-filename" class="headerlink" title="rm filename"></a>rm filename</h5><blockquote><p>注意这种删除方式会直接删除，并不会移动到废纸篓</p><p>为了避免误操作，推荐  <code>rm -i</code></p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">rm -i useless.txt <br><span class="hljs-built_in">remove</span> useless.txt? Y<br></code></pre></td></tr></table></figure><h4 id="Standard-Unix-Streams"><a href="#Standard-Unix-Streams" class="headerlink" title="Standard Unix Streams"></a>Standard Unix Streams</h4><blockquote><p>下面的std表示 <code>standard</code></p></blockquote><p><code>stdin</code>、<code>stdout</code> 和 <code>stderr</code> 是与程序输入输出相关的三个标准流，它们在操作系统和编程中起到重要的作用。</p><h5 id="stdin（标准输入）："><a href="#stdin（标准输入）：" class="headerlink" title="stdin（标准输入）："></a><strong>stdin（标准输入）：</strong></h5><ul><li><strong>含义：</strong> 表示程序的标准输入流。</li><li><strong>用途：</strong> 程序通过标准输入流接收输入。在大多数情况下，这与用户通过键盘输入相关联。</li></ul><h5 id="stdout（标准输出）："><a href="#stdout（标准输出）：" class="headerlink" title="stdout（标准输出）："></a><strong>stdout（标准输出）：</strong></h5><ul><li><strong>含义：</strong> 表示程序的标准输出流。</li><li><strong>用途：</strong> 程序通过标准输出流产生输出。通常，这与显示结果在屏幕上或将结果输出到文件相关。</li></ul><h5 id="stderr（标准错误）："><a href="#stderr（标准错误）：" class="headerlink" title="stderr（标准错误）："></a><strong>stderr（标准错误）：</strong></h5><ul><li><strong>含义：</strong> 表示程序的标准错误流。</li><li><strong>用途：</strong> 用于输出错误和警告信息。与标准输出不同，标准错误通常用于输出程序运行时的错误消息，以便用户或开发者能够获知程序运行时发生的问题。</li></ul><h3 id="Directory-Management"><a href="#Directory-Management" class="headerlink" title="Directory Management"></a>Directory Management</h3><blockquote><p><a href="https://www.tutorialspoint.com/unix/unix-directories.htm">参考链接</a></p></blockquote><h4 id="查看当前所在目录"><a href="#查看当前所在目录" class="headerlink" title="查看当前所在目录"></a>查看当前所在目录</h4><h5 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a><code>pwd</code></h5><p>To determine where you are within the filesystem hierarchy at any time, enter the command <strong>pwd</strong> to print the current working directory</p><h4 id="Home-Directory"><a href="#Home-Directory" class="headerlink" title="Home Directory"></a>Home Directory</h4><h5 id="cd-回到Home目录"><a href="#cd-回到Home目录" class="headerlink" title="cd ~ : 回到Home目录"></a>cd ~ : 回到Home目录</h5><blockquote><p>You can go in your home directory anytime using the  command <code>cd ~</code></p></blockquote><h5 id="cd-To-go-in-last-directory"><a href="#cd-To-go-in-last-directory" class="headerlink" title="cd - : To go in  last directory"></a>cd - : To go in  last directory</h5><p><img src="https://raw.githubusercontent.com/JackieDai/blogAssets/main/202402211116386.png"></p><h4 id="Absolute-Relative-Pathnames"><a href="#Absolute-Relative-Pathnames" class="headerlink" title="Absolute&#x2F;Relative Pathnames"></a>Absolute&#x2F;Relative Pathnames</h4><ul><li>绝对路径一定<strong>是</strong><code>/</code>开头</li><li>相对路径一定<strong>不是</strong><code>/</code>开头</li></ul><h4 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h4><ul><li><p>创建一个dirname</p><p><code>$ mkdir dirname</code></p></li><li><p>创建多个</p><p><code>$ mkdir dir01 dir02 dir03</code></p></li><li><p>创建父级目录</p><p><code>$ mkdir -p par/dir04 </code></p></li></ul><p><img src="https://raw.githubusercontent.com/JackieDai/blogAssets/main/202402211132621.png"></p><h4 id="删除文件夹"><a href="#删除文件夹" class="headerlink" title="删除文件夹"></a>删除文件夹</h4><h5 id="rmdir-directoryName"><a href="#rmdir-directoryName" class="headerlink" title="rmdir directoryName"></a><code>rmdir directoryName</code></h5><blockquote><p>要保证 将要被删除的是空文件夹</p><p>也可以一次性删除多个文件夹，就像创建时一样</p></blockquote><h4 id="重命名文件夹"><a href="#重命名文件夹" class="headerlink" title="重命名文件夹"></a>重命名文件夹</h4><blockquote><p>跟重命名文件一样</p></blockquote><h3 id="File-Permission-Access-Modes"><a href="#File-Permission-Access-Modes" class="headerlink" title="File Permission&#x2F;Access Modes"></a>File Permission&#x2F;Access Modes</h3><blockquote><p><a href="https://www.tutorialspoint.com/unix/unix-file-permission.htm">参考链接</a></p></blockquote><p>When execute the <code>ls -l</code> cmd, the results as follows</p><p><img src="https://raw.githubusercontent.com/JackieDai/blogAssets/main/202402210937910.png"></p><blockquote><p>NOTE:</p><p>In the <strong>ls -l</strong> listing example, every file line begins with a <strong>d</strong>, <strong>-</strong>, or <strong>l</strong>.</p></blockquote><p>The first column represents different access modes. And the first column string’s length is 10.</p><blockquote><ul><li>The first three characters <strong>(2-4)</strong> represent the permissions for <strong><u>the file’s owner</u></strong>. For example, <strong>-rwxr-xr–</strong> represents that the owner has read (r), write (w) and execute (x) permission.</li><li>The second group of three characters <strong>(5-7)</strong> consists of <strong><u>the permissions for the group</u></strong> to which the file belongs. For example, <strong>-rwxr-xr–</strong> represents that the group has read (r) and execute (x) permission, but no write permission.</li><li>The last group of three characters <strong>(8-10)</strong> represents <strong><u>the permissions for everyone else.</u></strong> For example, <strong>-rwxr-xr–</strong> represents that there is <strong>read (r)</strong> only permission.</li></ul><p>简言之，</p><p>除了第一个字符表示文件还是文件夹之外，后续字符分为三组</p><ul><li>第一组：(2-4) 表示 文件拥有者的 权限</li><li>第二组：(5-7) 表示 组 的权限</li><li>第三组：(8-10)表示所其他人的权限</li></ul></blockquote><h5 id="Changing-Permissions"><a href="#Changing-Permissions" class="headerlink" title="Changing Permissions"></a>Changing Permissions</h5><p><code>chmod</code> means change mode.</p><p>有两种方式该表权限模式</p><ul><li><p>The Symbolic Model</p><blockquote><ol><li><p>chmod o+wx testfile</p><p><code>o</code>: 表示其他用户（除了所有者和所属组之外的用户）</p><p><code>+</code>: 表示增加权限</p></li><li><p>chmod u-x testfile</p><p><strong><code>u</code>：</strong> 表示用户（user）</p><p><strong><code>-</code>：</strong> 表示移除权限</p></li><li><p>chmod g&#x3D;rx testfile</p><p><strong><code>g</code>：</strong> 代表群组权限。</p><p><strong><code>=</code>：</strong> 表示赋予权限，而不是添加或移除。</p></li></ol></blockquote></li><li><p>The Absolute Mode</p><blockquote><table><thead><tr><th align="center">Number</th><th align="center">Octal Permission Representation</th><th align="center">Ref</th></tr></thead><tbody><tr><td align="center"><strong>0</strong></td><td align="center">No permission</td><td align="center">—</td></tr><tr><td align="center"><strong>1</strong></td><td align="center">Execute permission</td><td align="center">–x</td></tr><tr><td align="center"><strong>2</strong></td><td align="center">Write permission</td><td align="center">-w-</td></tr><tr><td align="center"><strong>3</strong></td><td align="center">Execute and write permission: 1 (execute) + 2 (write) &#x3D; 3</td><td align="center">-wx</td></tr><tr><td align="center"><strong>4</strong></td><td align="center">Read permission</td><td align="center">r–</td></tr><tr><td align="center"><strong>5</strong></td><td align="center">Read and execute permission: 4 (read) + 1 (execute) &#x3D; 5</td><td align="center">r-x</td></tr><tr><td align="center"><strong>6</strong></td><td align="center">Read and write permission: 4 (read) + 2 (write) &#x3D; 6</td><td align="center">rw-</td></tr><tr><td align="center"><strong>7</strong></td><td align="center">All permissions: 4 (read) + 2 (write) + 1 (execute) &#x3D; 7</td><td align="center">rwx</td></tr></tbody></table><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs tap">$ls -l testfile<br>-rwxrwxr-- <span class="hljs-number"> 1 </span>amrood   users<span class="hljs-number"> 1024 </span> Nov<span class="hljs-number"> 2 </span>00:10  testfile<br><br>$ chmod<span class="hljs-number"> 755 </span>testfile<br>$ls -l testfile<br>-rwxr-xr-x <span class="hljs-number"> 1 </span>amrood   users<span class="hljs-number"> 1024 </span> Nov<span class="hljs-number"> 2 </span>00:10  testfile<br>$chmod<span class="hljs-number"> 743 </span>testfile<br>$ls -l testfile<br>-rwxr---wx <span class="hljs-number"> 1 </span>amrood   users<span class="hljs-number"> 1024 </span> Nov<span class="hljs-number"> 2 </span>00:10  testfile<br>$chmod<span class="hljs-number"> 043 </span>testfile<br>$ls -l testfile<br>----r---wx <span class="hljs-number"> 1 </span>amrood   users<span class="hljs-number"> 1024 </span> Nov<span class="hljs-number"> 2 </span>00:10  testfile<br></code></pre></td></tr></table></figure><p>NOTE:</p><p>chmoe <code>三个数字</code>  <code>filename</code></p><p>其中三个数字中  第一个表示 user（owner），第二个表示 group 第三个表示 others</p></blockquote></li></ul><p>&#x2F;&#x2F; TODO:</p><p>@lingxiao </p><ol><li>To grasp the changing owners and groups in reference link;</li><li>How to change ownership</li><li>SUID and SGID File permisson</li></ol><h3 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h3>]]></content>
    
    
    <categories>
      
      <category>Unix</category>
      
    </categories>
    
    
    <tags>
      
      <tag>unix</tag>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式入门</title>
    <link href="/2024/01/08/006swift/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/"/>
    <url>/2024/01/08/006swift/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="simple-regExp"><a href="#simple-regExp" class="headerlink" title="simple_regExp"></a>simple_regExp</h1><p><a href="https://github.com/qdlaoyao/js-regex-mini-book">文章参考链接</a><br><a href="https://github.com/JackieDai/simple_regExp">Demo链接</a></p><blockquote><p>正则表达式（Regular Expression，简称为RegExp或Regex）是一种强大而灵活的文本模式匹配工具。它是由一系列字符和特殊符号组成的字符串，用于描述和匹配一系列符合某种规律的字符串。正则表达式通常用于字符串的搜索、匹配、替换和提取操作，是处理文本的强大工具。</p><p>正则表达式的一些基本概念和元字符包括：</p><ol><li><p><strong>字符字面量：</strong> 普通字符表示它们自身，例如字母、数字、标点符号等。</p></li><li><p><strong>特殊字符：</strong> 一些字符具有特殊的含义，如 <code>.</code>、<code>*</code>、<code>+</code>、<code>?</code>、<code>|</code> 等，称为元字符，它们在正则表达式中有特定的作用。</p></li><li><p><strong>字符类：</strong> 用 <code>[]</code> 表示，匹配方括号中的任意一个字符。</p><ul><li><code>[aeiou]</code> 匹配任意一个元音字母。</li></ul></li><li><p><strong>范围：</strong> 在字符类中使用 <code>-</code> 表示范围，例如 <code>[0-9]</code> 表示匹配任意一个数字。</p></li><li><p><strong>量词：</strong> 用于指定匹配字符的数量，如 <code>*</code>（零次或多次）、<code>+</code>（一次或多次）、<code>?</code>（零次或一次）、<code>&#123;n&#125;</code>（恰好n次）等。</p><ul><li><code>a*</code> 匹配零个或多个连续的字母 “a”。</li></ul></li><li><p><strong>转义字符：</strong> 有些字符在正则表达式中有特殊含义，如果要匹配它们本身，需要使用反斜杠 <code>\</code> 进行转义。</p><ul><li><code>\.</code> 匹配点号字符。</li></ul></li><li><p><strong>分组：</strong> 使用 <code>()</code> 可以将一组字符看作一个整体，用于控制量词的作用范围。</p><ul><li><code>(ab)+</code> 匹配 “ab”、”abab”、”ababab” 等。</li></ul></li></ol><p>正则表达式是一种强大的工具，但由于其灵活性和复杂性，有时可能比较晦涩难懂。熟练掌握正则表达式可以在文本处理和搜索中提供高效而灵活的解决方案。</p></blockquote><h2 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h2><h3 id="横向匹配-m-n-连续出现最少-m-次，最多-n-次"><a href="#横向匹配-m-n-连续出现最少-m-次，最多-n-次" class="headerlink" title="横向匹配 {m,n}  连续出现最少 m 次，最多 n 次"></a>横向匹配 <code>&#123;m,n&#125;</code>  连续出现最少 m 次，最多 n 次</h3><blockquote><p> 横向模糊指的是，一个正则可匹配的字符串的长度不是固定的，可以是多种情况的。</p><p> 其实现的方式是使用量词。譬如 {m,n}，表示<strong>连续出现</strong>最少 m 次，最多 n 次。</p><p> 比如正则 “ab{2,5}c” 表示匹配这样一个字符串:第一个字符是 “a”，接下来是 2 到 5 个字符 “b”，最后是字符 “c”</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> config: <span class="hljs-type">RegExpConfig</span> <span class="hljs-operator">=</span> .<span class="hljs-keyword">init</span>(<br>    pattern: <span class="hljs-string">&quot;ab&#123;2,5&#125;c&quot;</span>,<br>    inputString: <span class="hljs-string">&quot;abc abbc abbbc abbbbc abbbbbc abbbbbbc&quot;</span><br>)<br><br><span class="hljs-keyword">let</span> result <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;abbc&quot;</span>, <span class="hljs-string">&quot;abbbc&quot;</span>, <span class="hljs-string">&quot;abbbbc&quot;</span>, <span class="hljs-string">&quot;abbbbbc&quot;</span>]<br><span class="hljs-type">XCTAssertEqual</span>(config.match_result_detail, result)<br></code></pre></td></tr></table></figure><h3 id="纵向匹配-abc-字符-“a”、”b”、”c”-中的任何一个"><a href="#纵向匹配-abc-字符-“a”、”b”、”c”-中的任何一个" class="headerlink" title="纵向匹配 [abc] &#x3D;&#x3D; 字符 “a”、”b”、”c” 中的任何一个"></a>纵向匹配 <code>[abc]</code> &#x3D;&#x3D; 字符 “a”、”b”、”c” 中的任何一个</h3><blockquote><p>纵向模糊指的是，一个正则匹配的字符串，具体到某一位字符时，它可以不是某个确定的字符，可以有多种可能。</p><p>其实现的方式是使用字符组。譬如 [abc]，表示该字符是可以字符 “a”、”b”、”c” 中的任何一个。比如 “a[123]b” 可以匹配如下三种字符串： “a1b”、”a2b”、”a3b”。</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> config: <span class="hljs-type">RegExpConfig</span> <span class="hljs-operator">=</span> .<span class="hljs-keyword">init</span>(<br>    pattern: <span class="hljs-string">&quot;a[123]b&quot;</span>,<br>    inputString: <span class="hljs-string">&quot;a0b a1b a2b a3b a4b&quot;</span><br>)<br><span class="hljs-keyword">let</span> result <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;a1b&quot;</span>, <span class="hljs-string">&quot;a2b&quot;</span>, <span class="hljs-string">&quot;a3b&quot;</span>]<br><span class="hljs-type">XCTAssertEqual</span>(config.match_result_detail, result)<br></code></pre></td></tr></table></figure><h2 id="字符组"><a href="#字符组" class="headerlink" title="字符组"></a>字符组</h2><blockquote><p>字符组（字符类），但只是其中一个字符。</p><p>例如 [abc]，表示匹配一个字符，它可以是 “a”、”b”、”c” 之一</p></blockquote><h3 id="范围表示法"><a href="#范围表示法" class="headerlink" title="- 范围表示法"></a><code>-</code> 范围表示法</h3><blockquote><p>“12345678900abcdefghijklmnopqistuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ”</p><p> 匹配出上述字符串中 1-6， a-f, A-F 的字符</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// let pattern = &quot;[123456abcdefABCDEF]&quot;  这种写法 太low, 可以通过 连字符“-” 来连接</span><br><span class="hljs-keyword">let</span> pattern <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[1-6a-fA-F]&quot;</span><br><br><span class="hljs-keyword">let</span> config: <span class="hljs-type">RegExpConfig</span> <span class="hljs-operator">=</span> .<span class="hljs-keyword">init</span>(<br>    pattern: pattern,<br>    inputString: <span class="hljs-string">&quot;12345678900abcdefghijklmnopqistuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><br>)<br><br><span class="hljs-keyword">let</span> r <span class="hljs-operator">=</span> [<br>    <span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>,<span class="hljs-string">&quot;5&quot;</span>,<span class="hljs-string">&quot;6&quot;</span>,<br>    <span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;d&quot;</span>,<span class="hljs-string">&quot;e&quot;</span>,<span class="hljs-string">&quot;f&quot;</span>,<br>    <span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;D&quot;</span>,<span class="hljs-string">&quot;E&quot;</span>,<span class="hljs-string">&quot;F&quot;</span><br>]<br><br><span class="hljs-comment">//        XCTAssertTrue(config.can_match)</span><br><span class="hljs-type">XCTAssertEqual</span>(config.match_result_detail, r)<br></code></pre></td></tr></table></figure><p>那么要匹配 “a”、”-“、”z” 这三者中任意一个字符，该怎么做呢？</p><p>不能写成 [a-z]，因为其表示小写字符中的任何一个字符。 可以写成如下的方式：[-az] 或 [az-] 或 [a-z]</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> pattern <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[-za]&quot;</span><br><br><span class="hljs-keyword">let</span> inputString <span class="hljs-operator">=</span> <span class="hljs-string">&quot;-12345678900abcdefghijklmnopqis-tuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><br><br><span class="hljs-keyword">let</span> result <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;z&quot;</span>]<br><span class="hljs-keyword">let</span> config: <span class="hljs-type">RegExpConfig</span> <span class="hljs-operator">=</span> .<span class="hljs-keyword">init</span>(pattern: pattern, inputString: inputString)<br><span class="hljs-type">XCTAssertEqual</span>(config.match_result_detail, result)<br></code></pre></td></tr></table></figure><h3 id="脱字符"><a href="#脱字符" class="headerlink" title="^ 脱字符"></a><code>^</code> 脱字符</h3><p>  在正则表达式中，<code>^</code> 符号有两个不同的用途，具体取决于它出现的位置：</p><ol><li><p><strong>在字符串的开始位置（脱字符）：</strong> 当 <code>^</code> 出现在正则表达式的开头时，它表示匹配字符串的开始位置。例如，正则表达式 <code>^abc</code> 将匹配以 “abc” 开始的字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs regex">^abc<br></code></pre></td></tr></table></figure><ul><li>匹配：”abc123”, “abcdef”, 等等。</li><li>不匹配：”123abc”, “xyzabc”, 等等。</li></ul></li><li><p><strong>在字符集([])内的位置：</strong> 当 <code>^</code> 出现在字符集的开头时，它表示对字符集进行否定操作，即匹配除了列出的字符之外的任何字符。例如，正则表达式 <code>[^0-9]</code> 将匹配任何非数字字符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs regex">[^0-9]<br></code></pre></td></tr></table></figure><ul><li>匹配：”a”, “X”, “$”, 等等。</li><li>不匹配：”1”, “9”, “0”, 等等。</li></ul></li></ol><p>总之，<code>^</code> 的含义取决于它在正则表达式中的位置。在开头表示字符串的开始，而在字符集内表示否定。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> pattern <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[^abcd]&quot;</span><br><span class="hljs-keyword">let</span> inputString <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1234abcdABCD&quot;</span><br><span class="hljs-keyword">let</span> config <span class="hljs-operator">=</span> <span class="hljs-type">RegExpConfig</span>(pattern: pattern, inputString: inputString)<br><span class="hljs-comment">//        XCTAssertTrue(config.can_match)</span><br><span class="hljs-keyword">let</span> r <span class="hljs-operator">=</span> [<br>    <span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>,<br>    <span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;D&quot;</span><br>]<br><span class="hljs-type">XCTAssertEqual</span>(config.match_result_detail, r)<br></code></pre></td></tr></table></figure><h3 id="d-0-9"><a href="#d-0-9" class="headerlink" title="\d  &#x3D;&#x3D; [0-9]"></a><code>\d</code>  &#x3D;&#x3D; <code>[0-9]</code></h3><h3 id="D-0-9"><a href="#D-0-9" class="headerlink" title="\D  &#x3D;&#x3D; [^0-9]"></a><code>\D</code>  &#x3D;&#x3D; <code>[^0-9]</code></h3><h3 id="w-0-9a-zA-Z-数字、大小写字母和下划线"><a href="#w-0-9a-zA-Z-数字、大小写字母和下划线" class="headerlink" title="\w  &#x3D;&#x3D; [0-9a-zA-Z_]   数字、大小写字母和下划线"></a><code>\w</code>  &#x3D;&#x3D; [0-9a-zA-Z_]   数字、大小写字母和下划线</h3><h3 id="W-0-9a-zA-Z-不是-数字、大小写字母和下划线"><a href="#W-0-9a-zA-Z-不是-数字、大小写字母和下划线" class="headerlink" title="\W  &#x3D;&#x3D; [^0-9a-zA-Z_]  不是 数字、大小写字母和下划线"></a><code>\W</code>  &#x3D;&#x3D; <code>[^0-9a-zA-Z_]</code>  不是 数字、大小写字母和下划线</h3><h3 id="s-表示空白符"><a href="#s-表示空白符" class="headerlink" title="\s  表示空白符"></a><code>\s</code>  表示空白符</h3><h3 id="S-非空白符"><a href="#S-非空白符" class="headerlink" title="\S  非空白符"></a><code>\S</code>  非空白符</h3><h3 id="通配符"><a href="#通配符" class="headerlink" title=".  通配符"></a><code>.</code>  通配符</h3><blockquote><p>在正则表达式中，<code>.</code> <u>是一个特殊的元字符，表示匹配除换行符 <code>\n</code> 之外的任意单个字符</u>。它是一个通配符，可以用来匹配任何字符，包括字母、数字、标点符号等。</p><p>下面是一些关于<code>.</code>的用法示例：</p><ol><li><p><strong>匹配任意字符：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs regex">a.b<br></code></pre></td></tr></table></figure><ul><li>匹配：”aab”, “abb”, “acb”, “a1b”, 等等。</li><li>不匹配：”abc”, “a\nb”, 等等。</li></ul></li><li><p><strong>使用<code>.</code>匹配特定数量的字符：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs regex">..t<br></code></pre></td></tr></table></figure><ul><li>匹配：”cat”, “bat”, “$$t”, 等等。</li><li>不匹配：”at”, “t”, 等等。</li></ul></li><li><p><strong>非贪婪匹配：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs regex">.*?<br></code></pre></td></tr></table></figure><p>这个例子中，<code>*</code> 是一个量词，表示匹配前面的字符零次或更多次，而 <code>?</code> 是用来实现非贪婪匹配的，表示匹配尽量少的字符。</p></li><li><p><strong>匹配任意字符，包括换行符：</strong><br>在一些正则表达式引擎中，可以使用 <code>.</code> 加上相关标记（例如 <code>(?s)</code>）来匹配包括换行符在内的任意字符。</p></li></ol><p>这些都是关于<code>.</code>在正则表达式中的一些基本用法。在实际使用时，要根据具体的需求选择合适的模式。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs swift">config <span class="hljs-operator">=</span> .<span class="hljs-keyword">init</span>(<br>    pattern: <span class="hljs-string">&quot;.&quot;</span>,<br>    inputString: <span class="hljs-string">&quot;!@#$%^&amp;*()e4<span class="hljs-subst">\n</span>&quot;</span><br>)<br><br><span class="hljs-keyword">let</span> r <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;!&quot;</span>,<span class="hljs-string">&quot;@&quot;</span>,<span class="hljs-string">&quot;#&quot;</span>,<span class="hljs-string">&quot;$&quot;</span>,<span class="hljs-string">&quot;%&quot;</span>,<span class="hljs-string">&quot;^&quot;</span>,<span class="hljs-string">&quot;&amp;&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>,<span class="hljs-string">&quot;(&quot;</span>,<span class="hljs-string">&quot;)&quot;</span>,<span class="hljs-string">&quot;e&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>,<span class="hljs-string">&quot;<span class="hljs-subst">\n</span>&quot;</span>]<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> XCTAssertEqual failed: (&quot;[&quot;!&quot;, &quot;@&quot;, &quot;#&quot;, &quot;$&quot;, &quot;%&quot;, &quot;^&quot;, &quot;&amp;&quot;, &quot;*&quot;, &quot;(&quot;, &quot;)&quot;, &quot;e&quot;, &quot;4&quot;]&quot;) is not equal to (&quot;[&quot;!&quot;, &quot;@&quot;, &quot;#&quot;, &quot;$&quot;, &quot;%&quot;, &quot;^&quot;, &quot;&amp;&quot;, &quot;*&quot;, &quot;(&quot;, &quot;)&quot;, &quot;e&quot;, &quot;4&quot;, &quot;\n&quot;]&quot;)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> 由上可知， .  不匹配 换行符  \n</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//        XCTAssertTrue(config.match_result)</span><br><span class="hljs-type">XCTAssertEqual</span>(config.match_result_detail, r)<br></code></pre></td></tr></table></figure></blockquote><h2 id="量词-：-Measure-Count"><a href="#量词-：-Measure-Count" class="headerlink" title="量词 ： Measure Count"></a>量词 ： Measure Count</h2><h3 id="m-至少连续出现-m-词"><a href="#m-至少连续出现-m-词" class="headerlink" title="{m,} 至少连续出现 m 词"></a><code>&#123;m,&#125;</code> 至少连续出现 <code>m</code> 词</h3><h3 id="m-连续出现-m-次"><a href="#m-连续出现-m-次" class="headerlink" title="{m}  连续出现 m 次"></a><code>&#123;m&#125;</code>  连续出现<code> m</code> 次</h3><h3 id="0-1-连续出现次数-要么0-要么1"><a href="#0-1-连续出现次数-要么0-要么1" class="headerlink" title="? &#x3D;&#x3D; {0, 1} 连续出现次数 要么0 要么1"></a><code>?</code> &#x3D;&#x3D; <code>&#123;0, 1&#125;</code> 连续出现次数 要么0 要么1</h3><h3 id="1-至少连续出现-1-次"><a href="#1-至少连续出现-1-次" class="headerlink" title="+ &#x3D;&#x3D; {1,} 至少连续出现 1 次"></a><code>+</code> &#x3D;&#x3D; <code>&#123;1,&#125;</code> 至少连续出现 1 次</h3><h3 id="等价于-0-，表示出现任意次，有可能不出现"><a href="#等价于-0-，表示出现任意次，有可能不出现" class="headerlink" title="*等价于 {0,}，表示出现任意次，有可能不出现"></a><code>*</code>等价于 <code>&#123;0,&#125;</code>，表示出现任意次，有可能不出现</h3><h2 id="贪婪匹配与惰性匹配"><a href="#贪婪匹配与惰性匹配" class="headerlink" title="贪婪匹配与惰性匹配"></a>贪婪匹配与惰性匹配</h2><h3 id="贪婪匹配：-尽可能多的-匹配-出-满足条件的-要求"><a href="#贪婪匹配：-尽可能多的-匹配-出-满足条件的-要求" class="headerlink" title="贪婪匹配： 尽可能多的 匹配 出 满足条件的 要求"></a>贪婪匹配： 尽可能多的 匹配 出 满足条件的 要求</h3><p>如下案例</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs swift">config <span class="hljs-operator">=</span> .<span class="hljs-keyword">init</span>(<br>    pattern: <span class="hljs-string">&quot;<span class="hljs-subst">\\</span>d&#123;2,5&#125;&quot;</span>, <span class="hljs-comment">// 表示数字连续出现 2 到 5 次</span><br>    inputString: <span class="hljs-string">&quot;123 1234 12345 123456&quot;</span><br>)<br><span class="hljs-keyword">let</span> result <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;123&quot;</span>, <span class="hljs-string">&quot;1234&quot;</span>, <span class="hljs-string">&quot;12345&quot;</span>, <span class="hljs-string">&quot;12345&quot;</span>]<br><span class="hljs-type">XCTAssertEqual</span>(config.match_result_detail, result)<br></code></pre></td></tr></table></figure><h3 id="惰性匹配：-表示在量词后-添加-“-”"><a href="#惰性匹配：-表示在量词后-添加-“-”" class="headerlink" title="惰性匹配： 表示在量词后 添加 “?”"></a>惰性匹配： 表示在量词后 添加 “?”</h3><p>如下案例</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs swift">config <span class="hljs-operator">=</span> .<span class="hljs-keyword">init</span>(<br>    pattern: <span class="hljs-string">&quot;<span class="hljs-subst">\\</span>d&#123;2,5&#125;?&quot;</span>,<br>    inputString: <span class="hljs-string">&quot;123 1234 12345 123456&quot;</span><br>)<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> &quot;\\d&#123;2,5&#125;?&quot;  后面 添加了 一个 ？ 表示，虽然 2 到 5 次都行，当 2 个就够的时候，就不再往下尝试了</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">let</span> result <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;12&quot;</span>, <span class="hljs-string">&quot;12&quot;</span>,<span class="hljs-string">&quot;34&quot;</span>,<span class="hljs-string">&quot;12&quot;</span>,<span class="hljs-string">&quot;34&quot;</span>, <span class="hljs-string">&quot;12&quot;</span>,<span class="hljs-string">&quot;34&quot;</span>,<span class="hljs-string">&quot;56&quot;</span>]<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> inputString: &quot;123 1234 12345 123456&quot;</span><br><span class="hljs-comment"> result[0] == &quot;12&quot; 表示 从 123 中匹配的    这里有一个连续的出现2次的数字</span><br><span class="hljs-comment"> result[1] == &quot;12&quot;，result[2] == &quot;34&quot;  表示 从 1234 中匹配的  这里面有两个 连续的出现2次的数字</span><br><span class="hljs-comment"> result[3] == &quot;12&quot;，result[4] == &quot;34&quot;  表示 从 12345 中匹配的   这里面有两个 连续的出现2次的数字</span><br><span class="hljs-comment"> result[5] == &quot;12&quot;，result[6] == &quot;34&quot; ，result[7] == &quot;56&quot;表示 从 12345 中匹配的   这里面有三个 连续的出现2次的数字</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">XCTAssertEqual</span>(config.match_result_detail, result)<br></code></pre></td></tr></table></figure><h2 id="多选分支-逻辑或"><a href="#多选分支-逻辑或" class="headerlink" title="|多选分支 &#x3D;&#x3D; 逻辑或"></a><code>|</code>多选分支 &#x3D;&#x3D; 逻辑或</h2><blockquote><p> 一个模式可以实现横向和纵向模糊匹配。而多选分支可以支持多个子模式任选其一。</p><p> 具体形式如下：(p1|p2|p3)，其中 p1、p2 和 p3 是子模式，用 |（管道符）分隔，表示其中任何之一。</p><p>**<code>|</code>**表示逻辑上的“或”关系。具体来说，| 用于在正则表达式中分隔两个模式，表示匹配其中任意一个模式即可</p><p>分支结构也是惰性的，前面的选项匹配成功就不会匹配后面的</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">func</span> <span class="hljs-title function_">test_multiple_branch</span>() &#123;<br>    config <span class="hljs-operator">=</span> .<span class="hljs-keyword">init</span>(<br>        pattern: <span class="hljs-string">&quot;good|nice&quot;</span>,<span class="hljs-comment">// 相当于 逻辑或</span><br>        inputString: <span class="hljs-string">&quot;good idea, nice try.&quot;</span><br>    )<br>    <span class="hljs-keyword">let</span> r <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;good&quot;</span>,<span class="hljs-string">&quot;nice&quot;</span>]<br>    <span class="hljs-type">XCTAssertEqual</span>(config.match_result_detail, r)<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> <span class="hljs-doctag">NOTE:</span></span><br><span class="hljs-comment"> 应该注意，比如我用 /good|goodbye/，去匹配 &quot;goodbye&quot; 字符串时，结果是 &quot;good&quot;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">func</span> <span class="hljs-title function_">test_multiple_branch001</span>() &#123;<br>    config <span class="hljs-operator">=</span> .<span class="hljs-keyword">init</span>(<br>        pattern: <span class="hljs-string">&quot;good|goodbye&quot;</span>,<span class="hljs-comment">// 相当于 逻辑或</span><br>        inputString: <span class="hljs-string">&quot;goodbye&quot;</span><br>    )<br><br>    <span class="hljs-keyword">let</span> r0 <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;good&quot;</span>]<br><span class="hljs-comment">//        let r1 = [&quot;goodbye&quot;] // 这个测试不通过，其匹配的结果是 good</span><br><br>    <span class="hljs-type">XCTAssertEqual</span>(config.match_result_detail, r0)<br><span class="hljs-comment">//        XCTAssertEqual(config.match_result_detail, r1) // 这个测试项 不通过</span><br>&#125;<br><br><span class="hljs-keyword">func</span> <span class="hljs-title function_">test_multiple_branch002</span>() &#123;<br>    config <span class="hljs-operator">=</span> .<span class="hljs-keyword">init</span>(<br>        pattern: <span class="hljs-string">&quot;goodbye|good&quot;</span>,<span class="hljs-comment">// 相当于 逻辑或</span><br>        inputString: <span class="hljs-string">&quot;goodbye&quot;</span><br>    )<br><br>    <span class="hljs-keyword">let</span> r1 <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;goodbye&quot;</span>]<br><br>    <span class="hljs-type">XCTAssertEqual</span>(config.match_result_detail, r1)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="位置匹配"><a href="#位置匹配" class="headerlink" title="位置匹配"></a>位置匹配</h2><blockquote><p>理解位置:</p><p>​对于位置的理解，我们可以理解成空字符 “”,每一个 空字符串”” 就表示位置</p><p>​hello &#x3D; <code>&quot;&quot;</code>+<code>&quot;h&quot;</code>+<code>&quot;&quot;</code>+<code>&quot;e&quot;</code>+<code>&quot;&quot;</code>+<code>&quot;l&quot;</code>+<code>&quot;&quot;</code>+<code>&quot;l&quot;</code>+<code>&quot;&quot;</code>+<code>&quot;o&quot;</code>+<code>&quot;&quot;</code></p></blockquote><h3 id=""><a href="#" class="headerlink" title="^, $"></a><code>^</code>, <code>$</code></h3><ul><li><code>^</code> 开始位置</li><li><code>$ </code> 结束位置</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> inputString <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span><br><span class="hljs-keyword">let</span> pattern <span class="hljs-operator">=</span> <span class="hljs-string">&quot;(^|$)&quot;</span> <span class="hljs-comment">// 要么开头，要么结尾</span><br><span class="hljs-keyword">let</span> replaceStr <span class="hljs-operator">=</span> <span class="hljs-string">&quot;#&quot;</span><br><br>config <span class="hljs-operator">=</span> .<span class="hljs-keyword">init</span>(pattern: pattern, inputString: inputString, replaceStr: replaceStr)<br><span class="hljs-keyword">let</span> r <span class="hljs-operator">=</span> <span class="hljs-string">&quot;#hello#&quot;</span><br><span class="hljs-type">XCTAssertEqual</span>(config.modify_result, r)<br></code></pre></td></tr></table></figure><h3 id="b-B"><a href="#b-B" class="headerlink" title="\b,\B"></a><code>\b</code>,<code>\B</code></h3><blockquote><p>在正则表达式中，\b 和 \B 是用于表示单词边界（Word Boundary）的元字符，</p><p>它们有如下的含义：</p><ul><li><code>\b</code> 是单词边界，具体就是 <code>\w</code> 与<code> \W</code> 之间的位置，也包括 <code>\w</code> 与 <code>^</code> 之间的位置，和<code>\w</code>与 <code>$ </code>之间的位置 </li><li><code>\B</code>（非单词边界）： 与 <code>\b</code> 相反，<code>\B</code> 表示匹配不是单词边界的位置。它同样是一个零宽断言，不消耗匹配字符。</li></ul></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> inputString <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[Swift] Les@$son_01.txt&quot;</span><br><span class="hljs-keyword">let</span> pattern <span class="hljs-operator">=</span> <span class="hljs-string">&quot;<span class="hljs-subst">\\</span>b&quot;</span><br><span class="hljs-keyword">let</span> replaceStr <span class="hljs-operator">=</span> <span class="hljs-string">&quot;#&quot;</span><br><br>config <span class="hljs-operator">=</span> .<span class="hljs-keyword">init</span>(pattern: pattern, inputString: inputString, replaceStr: replaceStr)<br><span class="hljs-keyword">let</span> r <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[#Swift#] #Les#@$#son_01#.#txt#&quot;</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> 去理解 单词边界的意思    Swift   Les    son_01   txt 都是单词</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-type">XCTAssertEqual</span>(config.modify_result, r)<br></code></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> inputString <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[Swift] Lesson_01.txt&quot;</span><br><span class="hljs-keyword">let</span> pattern <span class="hljs-operator">=</span> <span class="hljs-string">&quot;<span class="hljs-subst">\\</span>B&quot;</span><br><span class="hljs-keyword">let</span> replaceStr <span class="hljs-operator">=</span> <span class="hljs-string">&quot;#&quot;</span><br><br><br>config <span class="hljs-operator">=</span> .<span class="hljs-keyword">init</span>(pattern: pattern, inputString: inputString, replaceStr: replaceStr)<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> 理解非单词边界，  跟 单词边界 正相反 ，参考上面的案例</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">let</span> r <span class="hljs-operator">=</span> <span class="hljs-string">&quot;#[S#w#i#f#t]# L#e#s#s#o#n#_#0#1.t#x#t&quot;</span><br><br><span class="hljs-type">XCTAssertEqual</span>(config.modify_result, r)<br></code></pre></td></tr></table></figure><h3 id="和"><a href="#和" class="headerlink" title="(?=...) 和 (?!=...)"></a><code>(?=...)</code> 和 <code>(?!=...)</code></h3><blockquote><ul><li><p><code>(?=...)</code>： 正向先行断言，表示模式只有在某个位置之前的位置匹配时才匹配。例如，foo(?&#x3D;bar) 匹配 “foo”，但仅当其后面是 “bar” 时才匹配。</p></li><li><p><code>(?!...)</code>： 负向先行断言，表示模式只有在某个位置之前的位置不匹配时才匹配。例如，foo(?!bar) 匹配 “foo”，但仅当其后面不是 “bar” 时才匹配。</p></li></ul></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">func</span> <span class="hljs-title function_">test_postive_pattern</span>() &#123;<br>    <span class="hljs-keyword">let</span> inputString <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span><br>    <span class="hljs-keyword">let</span> pattern <span class="hljs-operator">=</span> <span class="hljs-string">&quot;(?=l)&quot;</span> <span class="hljs-comment">// 当前位置后 是 l 的 位置</span><br>    <span class="hljs-keyword">let</span> replaceStr <span class="hljs-operator">=</span> <span class="hljs-string">&quot;#&quot;</span><br><br>    config <span class="hljs-operator">=</span> .<span class="hljs-keyword">init</span>(pattern: pattern, inputString: inputString, replaceStr: replaceStr)<br><br>    <span class="hljs-keyword">let</span> r <span class="hljs-operator">=</span> <span class="hljs-string">&quot;he#l#lo&quot;</span><br><br>    <span class="hljs-type">XCTAssertEqual</span>(config.modify_result, r)<br>&#125;<br><br><span class="hljs-keyword">func</span> <span class="hljs-title function_">test_negative_pattern</span>() &#123;<br>    <span class="hljs-keyword">let</span> inputString <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span><br>    <span class="hljs-keyword">let</span> pattern <span class="hljs-operator">=</span> <span class="hljs-string">&quot;(?!l)&quot;</span><br>    <span class="hljs-keyword">let</span> replaceStr <span class="hljs-operator">=</span> <span class="hljs-string">&quot;#&quot;</span><br><br>    config <span class="hljs-operator">=</span> .<span class="hljs-keyword">init</span>(pattern: pattern, inputString: inputString, replaceStr: replaceStr)<br><br>    <span class="hljs-keyword">let</span> r <span class="hljs-operator">=</span> <span class="hljs-string">&quot;#h#ell#o#&quot;</span> <span class="hljs-comment">//当前位置后 不是是 l 的 位置</span><br><br>    <span class="hljs-type">XCTAssertEqual</span>(config.modify_result, r)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="在正则表达式中的作用"><a href="#在正则表达式中的作用" class="headerlink" title="? 在正则表达式中的作用"></a>? 在正则表达式中的作用</h3><p>在正则表达式中，<code>?</code> 具有多种用法，取决于它出现的位置和上下文。以下是主要的用法：</p><ol><li><strong>零次或一次匹配：</strong> 在一个字符、字符集、子表达式或分组后面使用 <code>?</code>，表示该元素是可选的，即出现零次或一次。例如，正则表达式 <code>colou?r</code> 可以匹配 “color” 或 “colour”。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs regex">colou?r<br></code></pre></td></tr></table></figure><ul><li>匹配：”color”, “colour”</li><li>不匹配：”colouur”, “colr”</li></ul><ol><li><strong>非贪婪匹配：</strong> 在量词（如 <code>*</code> 或 <code>+</code>）后面使用 <code>?</code>，表示匹配尽量少的字符。默认情况下，量词是贪婪的，会尽量匹配更多的字符。通过在量词后面添加 <code>?</code>，可以实现非贪婪匹配。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs regex">.*?  // 匹配任意字符，但尽量匹配最少字符<br></code></pre></td></tr></table></figure><ol><li><strong>正向先行断言：</strong> 在一个位置之前使用 <code>(?=...)</code>，表示模式只有在该位置之前的位置匹配时才匹配。例如，<code>foo(?=bar)</code> 匹配 “foo”，但仅当其后面是 “bar” 时才匹配。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs regex">foo(?=bar)<br></code></pre></td></tr></table></figure><ul><li>匹配：”foobar”, “foo123bar”</li><li>不匹配：”foo”, “bar”</li></ul><ol><li><strong>负向先行断言：</strong> 在一个位置之前使用 <code>(?!...)</code>，表示模式只有在该位置之前的位置不匹配时才匹配。例如，<code>foo(?!bar)</code> 匹配 “foo”，但仅当其后面不是 “bar” 时才匹配。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs regex">foo(?!bar)<br></code></pre></td></tr></table></figure><ul><li>匹配：”foo”, “foobaz”</li><li>不匹配：”foobar”, “foo123bar”</li></ul><hr><h2 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h2><p>正则表达式中的量词用于指定一个字符或字符组可以匹配的次数。量词是正则表达式中非常强大和常用的部分，可以帮助描述匹配模式的重复性要求。以下是常见的量词及其作用：</p><ol><li><p>**<code>*</code> (星号)**：</p><ul><li>匹配前面的元素零次或多次。</li><li>例如，<code>a*</code> 匹配 “”, “a”, “aa”, “aaa” 等。</li></ul></li><li><p>**<code>+</code> (加号)**：</p><ul><li>匹配前面的元素一次或多次。</li><li>例如，<code>a+</code> 匹配 “a”, “aa”, “aaa” 等（不匹配空字符串）。</li></ul></li><li><p>**<code>?</code> (问号)**：</p><ul><li>匹配前面的元素零次或一次。</li><li>例如，<code>a?</code> 匹配 “” 或 “a”。</li></ul></li><li><p>**<code>&#123;n&#125;</code>**：</p><ul><li>精确匹配前面的元素 <code>n</code> 次。</li><li>例如，<code>a&#123;3&#125;</code> 匹配 “aaa”。</li></ul></li><li><p>**<code>&#123;n,&#125;</code>**：</p><ul><li>匹配前面的元素至少 <code>n</code> 次。</li><li>例如，<code>a&#123;2,&#125;</code> 匹配 “aa”, “aaa”, “aaaa” 等。</li></ul></li><li><p>**<code>&#123;n,m&#125;</code>**：</p><ul><li>匹配前面的元素至少 <code>n</code> 次，但不超过 <code>m</code> 次。</li><li>例如，<code>a&#123;2,4&#125;</code> 匹配 “aa”, “aaa”, “aaaa”。</li></ul></li></ol><h3 id="贪婪与非贪婪量词"><a href="#贪婪与非贪婪量词" class="headerlink" title="贪婪与非贪婪量词"></a>贪婪与非贪婪量词</h3><p>默认情况下，量词是贪婪的，这意味着它们会尽可能多地匹配字符。可以通过在量词后面加上 <code>?</code> 来使其变为非贪婪的（或懒惰的），即尽可能少地匹配字符。</p><ol><li><p><strong>贪婪量词</strong>：</p><ul><li><code>*</code>：零次或多次，尽可能多地匹配。</li><li><code>+</code>：一次或多次，尽可能多地匹配。</li><li><code>?</code>：零次或一次，尽可能多地匹配。</li><li><code>&#123;n,&#125;</code>：至少 <code>n</code> 次，尽可能多地匹配。</li><li><code>&#123;n,m&#125;</code>：至少 <code>n</code> 次但不超过 <code>m</code> 次，尽可能多地匹配。</li></ul></li><li><p><strong>非贪婪量词</strong>（在贪婪量词后加 <code>?</code>）：</p><ul><li><code>*?</code>：零次或多次，尽可能少地匹配。</li><li><code>+?</code>：一次或多次，尽可能少地匹配。</li><li><code>??</code>：零次或一次，尽可能少地匹配。</li><li><code>&#123;n,&#125;?</code>：至少 <code>n</code> 次，尽可能少地匹配。</li><li><code>&#123;n,m&#125;?</code>：至少 <code>n</code> 次但不超过 <code>m</code> 次，尽可能少地匹配。</li></ul></li></ol><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ol><li><p><strong>贪婪匹配</strong>：</p><ul><li>正则表达式 <code>a.*b</code>：<ul><li>在字符串 “aababc” 中匹配 “aababc”。</li></ul></li></ul></li><li><p><strong>非贪婪匹配</strong>：</p><ul><li>正则表达式 <code>a.*?b</code>：<ul><li>在字符串 “aababc” 中匹配 “aab” 和 “ab”。</li></ul></li></ul></li></ol><p>通过使用量词，你可以灵活地描述字符串中字符的重复模式，使正则表达式更加强大和实用。</p>]]></content>
    
    
    <categories>
      
      <category>regExp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>regExp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lua-Loop(循环)</title>
    <link href="/2024/01/03/004lua/lua-Loop-%E5%BE%AA%E7%8E%AF/"/>
    <url>/2024/01/03/004lua/lua-Loop-%E5%BE%AA%E7%8E%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><h5 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax:"></a>Syntax:</h5><blockquote><p>while(condition)<br>do<br>   statement(s)<br>end</p></blockquote><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lua">a = <span class="hljs-number">10</span><br><span class="hljs-keyword">while</span>( a &lt; <span class="hljs-number">20</span> )<br><span class="hljs-keyword">do</span><br>   <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;value of a:&quot;</span>, a)<br>   a = a+<span class="hljs-number">1</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><p><a href="https://www.tutorialspoint.com/lua/lua_for_loop.htm">参考链接1</a></p><blockquote><p>The <strong>for</strong> statement has two variants(变种): <u>the <em>numeric</em> <strong>for</strong></u> and <u>the <em>generic</em> <strong>for</strong></u>.</p></blockquote><h4 id="Numeric-for-数值for循环"><a href="#Numeric-for-数值for循环" class="headerlink" title="Numeric for (数值for循环)"></a>Numeric <strong>for</strong> (数值for循环)</h4><p><a href="https://www.lua.org/pil/4.3.4.html">官方文档</a></p><blockquote><p> for var&#x3D;exp1,exp2,exp3 do<br>   something<br> end</p><blockquote><ul><li>exp1: initial condition</li><li>exp2:  final condition</li><li>exp3:  step<ul><li>this exp is optional,when absent, Lua assumes one as the step value.</li></ul></li></ul></blockquote></blockquote><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">--[[</span><br><span class="hljs-comment">exp1: i = 10</span><br><span class="hljs-comment">exp2: 4</span><br><span class="hljs-comment">exp3: -2</span><br><span class="hljs-comment">]]</span><br><span class="hljs-keyword">for</span> i = <span class="hljs-number">10</span>, <span class="hljs-number">4</span>, <span class="hljs-number">-2</span> <span class="hljs-keyword">do</span><br>   <span class="hljs-built_in">print</span>(i) <span class="hljs-comment">-- 10,8,6,4</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- Omit exp3</span><br><span class="hljs-keyword">for</span> i = <span class="hljs-number">1</span>, <span class="hljs-number">3</span> <span class="hljs-keyword">do</span><br>   <span class="hljs-built_in">print</span>(i) <span class="hljs-comment">-- 1,2,3</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h3 id="Generic-for-泛型for循环"><a href="#Generic-for-泛型for循环" class="headerlink" title="Generic for (泛型for循环)"></a>Generic <strong>for</strong> (泛型for循环)</h3><p><a href="https://www.lua.org/pil/4.3.5.html">官方文档</a></p><p>The generic <strong>for</strong> loop allows you to <u>traverse(遍历) all values</u> returned by <strong>an iterator function.</strong></p><h5 id="ipairs"><a href="#ipairs" class="headerlink" title="ipairs()"></a>ipairs()</h5><blockquote><p>When the traversed value is nil, the for loop will terminate.</p></blockquote><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> a = &#123;<span class="hljs-string">&quot;one&quot;</span>,<span class="hljs-string">&quot;two&quot;</span>,<span class="hljs-literal">nil</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3.14</span>&#125;<br><span class="hljs-keyword">for</span> index, value <span class="hljs-keyword">in</span> <span class="hljs-built_in">ipairs</span>(a) <span class="hljs-keyword">do</span><br>   <span class="hljs-built_in">print</span>(value) <span class="hljs-comment">-- one, two</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h5 id="pairs"><a href="#pairs" class="headerlink" title="pairs()"></a>pairs()</h5><blockquote><p>When the traversed value is nil, the for loop will omit the nil value and continue to the rest.</p></blockquote><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> a = &#123;<span class="hljs-string">&quot;one&quot;</span>,<span class="hljs-string">&quot;two&quot;</span>,<span class="hljs-literal">nil</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3.14</span>&#125;<br><span class="hljs-keyword">for</span> index, value <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(a) <span class="hljs-keyword">do</span><br>   <span class="hljs-built_in">print</span>(value) <span class="hljs-comment">-- one, two, 1, 2, 3.14</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h2 id="repeat…until"><a href="#repeat…until" class="headerlink" title="repeat…until"></a>repeat…until</h2><p>Similiar to other programing language.</p><h2 id="nested-loop"><a href="#nested-loop" class="headerlink" title="nested loop"></a>nested loop</h2><p>Similiar to other programing language.</p>]]></content>
    
    
    <categories>
      
      <category>Lua</category>
      
    </categories>
    
    
    <tags>
      
      <tag>lua</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lua-Operators(运算符)</title>
    <link href="/2024/01/03/004lua/lua-Operators-%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2024/01/03/004lua/lua-Operators-%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h2 id="Arthmetic-Operators"><a href="#Arthmetic-Operators" class="headerlink" title="Arthmetic Operators"></a>Arthmetic Operators</h2><p>Similiar to other programing languages, there are also <code>+</code> <code>-</code> <code>*</code> <code>/</code> <code>%</code> in Lua. On top of that, lua also has <code>^</code> (exponent) operator.</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> a = <span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(a ^ <span class="hljs-number">1</span>)    <span class="hljs-comment">-- 2.0</span><br><span class="hljs-built_in">print</span>(a ^ <span class="hljs-number">2</span>)    <span class="hljs-comment">-- 4.0</span><br><span class="hljs-built_in">print</span>(a ^ <span class="hljs-number">3</span>)    <span class="hljs-comment">-- 8.0</span><br><span class="hljs-built_in">print</span>(a ^ <span class="hljs-number">4</span>)    <span class="hljs-comment">-- 16.0</span><br></code></pre></td></tr></table></figure><h2 id="Relational-Operators"><a href="#Relational-Operators" class="headerlink" title="Relational Operators"></a>Relational Operators</h2><p>This section is the same to other programing language. </p><blockquote><p><strong>Note: unequal operator is <code>~=</code></strong></p></blockquote><h2 id="Logical-Operators"><a href="#Logical-Operators" class="headerlink" title="Logical Operators"></a>Logical Operators</h2><p>This section has a great distinction from others.</p><blockquote><p><strong>NOTE</strong>:</p><p>Only <strong><code>nil</code></strong> or <strong><code>false</code></strong> will be recognized as false.</p></blockquote><h5 id="and"><a href="#and" class="headerlink" title="and"></a><code>and</code></h5><p>Similiar to other language <code>&amp;&amp;</code></p><p><img src="https://raw.githubusercontent.com/JackieDai/blogAssets/main/202401031606374.png"></p><h5 id="or"><a href="#or" class="headerlink" title="or"></a><code>or</code></h5><p>Similiar to other language <code>||</code></p><p><img src="https://raw.githubusercontent.com/JackieDai/blogAssets/main/202401031613705.png"></p><h5 id="not"><a href="#not" class="headerlink" title="not"></a><code>not</code></h5><p>Similiar to other language <code>!</code></p><h2 id="Misc-Operators"><a href="#Misc-Operators" class="headerlink" title="Misc Operators"></a>Misc Operators</h2><ol><li><p><code>.. </code>    concatenation</p><blockquote><p>Concatenates two strings.</p></blockquote><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> a, b = <span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&#x27;lua&#x27;</span><br><span class="hljs-keyword">local</span> c = a .. <span class="hljs-string">&quot;-&quot;</span> .. b<br><span class="hljs-built_in">print</span>(c) <span class="hljs-comment">-- hello-lua</span><br></code></pre></td></tr></table></figure></li><li><p><code>#</code>   length</p><blockquote><p>An unary operator that return <strong>the length of the a string or a table.</strong></p></blockquote><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> a = <span class="hljs-string">&quot;hello&quot;</span><br><span class="hljs-keyword">local</span> b = #a<br><span class="hljs-built_in">print</span>(b) <span class="hljs-comment">-- 5</span><br><br><span class="hljs-keyword">local</span> t = &#123;<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;lua&quot;</span>,<span class="hljs-string">&quot;python&quot;</span>&#125;<br><span class="hljs-keyword">local</span> c = #t<br><span class="hljs-built_in">print</span>(c) <span class="hljs-comment">-- 3</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Lua</category>
      
    </categories>
    
    
    <tags>
      
      <tag>lua</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Year-End Summary for 2023</title>
    <link href="/2023/12/26/005personal/Year-End-Summary-for-2023/"/>
    <url>/2023/12/26/005personal/Year-End-Summary-for-2023/</url>
    
    <content type="html"><![CDATA[<blockquote><p><strong>Key words</strong> of 2023:</p><ul><li>Make Grandpa and Grandma’s dream of the journey to Beijing come true.</li><li>A termination hit me unexpectedly due to uncontrollable factors.</li><li>The door toward a new world scenario has been opened by LUX.</li><li>Make rational plans and proceed step by step. </li><li>All of my wife and son are doing well and will continue to do well.</li></ul></blockquote><h2 id="The-journey-to-BeiJing"><a href="#The-journey-to-BeiJing" class="headerlink" title="The journey to BeiJing"></a>The journey to BeiJing</h2><p> People who were born in the 1940s to the 1960s have profound faith in Chairman Mao; it’s one of the most significant beliefs for them. My grandpa and grandma are among those kind people. Especially for Grandpa, he knows lots of songs from that special period, such as 《Hong Hu Shui》, 《She Hui Zhu Yi Hao》, and many more.</p><p> With the time goes by, they get older and older.Each of them is nearly 80 years old. I think no kid will go along with them to start the journey to Beijing, except for my sister and me, even though they have many sons and grandsons. Because they have too much work to do, they are unable to take a trip with the elders.</p><p> So, I decided to start the journey on April 5th and end on April 8th. …</p><p> I don’t want to write the more detail about the journey. Just need to know that we experienced fond memories and a rewarding time.</p><h2 id="I-was-laid-off"><a href="#I-was-laid-off" class="headerlink" title="I was laid off"></a>I was laid off</h2><p><del>I was laid off on August 11th suddenly. Can you imagine that I was still working in that afternoon and got a phone call from my boss hence I lost my job For irresistible factors.</del><br>I was laid off suddenly on August 11th. Can you imagine that I was still working in the afternoon when I received a phone call from my boss, resulting in the loss of my job due to uncontrollable factors? (In fact,Our business has been shut down, and my colleagues’s situation were the same as mine.)</p><p>To be honest, I felt turmoil. No job means no income. How can I pay my mortgage? How can I support my family? How can I survive? These are all real-world problems.</p><p>So I need a job as soon as possible. <del>I know I was falling into a trap, I know the job provide incomes can not solve the problem in the long term, but i can not stop.</del> I know I fell into a trap. I understand that a job providing income may not solve the problem in the long term, but I can’t stop. The trap is the Rat Race, the biggest problem in my whole life. I have not <u>figured out</u> a strategy to resolve it. Currently, a short-term stable job is necessary for me.</p><p>I had started to <u>reorganize my resume</u> and applied to many companies. Due to significant layoffs in the internet industry, only a few companies have <u>granted interview opportunities</u>, but the results were not as expected.</p><p>I want to say “FUCK”.</p><h2 id="Join-the-Lux-company"><a href="#Join-the-Lux-company" class="headerlink" title="Join the Lux company"></a>Join the Lux company</h2><p>I had been hired after fore rounds of interview. Except for the third round’s onsite interview, all others were <u>conducted</u> through online interviews. </p><p><del>I appreciate with my manager named Near profusely. He had did lots of help for me.</del>I appreciate my manager named Near profusely. He has done lots of help for me.(I am deeply grateful to my manager, Near, for his extensive assistance.) It seems to me like a completely new industry In Lux. I have never <u>been exposed to</u> the manufacturing industry.</p><p>As a novice in the scope of this field, <del>I need lots of to learn to meet work’s requirement</del>I need to learn a lot to meet the requirements of my work. <del>Such as lua, atlas, python, Macos development skills</del>This includes skills in Lua, Atlas, Python, and macOS development. I’m glad to welcome this challenge, and I believe I can do it well.</p><h2 id="Rational-Plans"><a href="#Rational-Plans" class="headerlink" title="Rational Plans"></a>Rational Plans</h2><blockquote><ul><li>This section is imperative to me. Act on it step by step.</li><li>The plans of 2024 are as follows:</li></ul></blockquote><ol><li><strong>Continue to finish reading the Rich Dad Poor Dad book</strong></li><li><strong>Accumulate a vocabulary of 3000 unfamiliar words.<del>Accumulate the number of 3000 unfamiliar words</del></strong></li><li><strong>Read Elon Musk’s book.</strong></li><li><strong>Listen to the audio resource of the book.</strong></li><li><strong>Master Basic Skills about C,C++,Regex</strong></li><li><strong>Master Python and Lua development skills</strong></li></ol><blockquote><ul><li>English learning is a long term process.<del>It is your basic skills. I think it is more important than procedural competent.</del>  <u>It forms the foundation of your skills</u>, which I believe is more important than procedural competence. Train your english abilities diligently.</li><li>If I can <del>do the above plans</del> accomplish the plans above, I will give myself the biggest “Zan”! There will be no regret in 2024.</li><li><strong>Strive! Strive! Strive! Struggle! Struggle! Struggle!</strong></li></ul></blockquote><h2 id="Personal-life"><a href="#Personal-life" class="headerlink" title="Personal life"></a>Personal life</h2><p><strong>I am satsified with my family. Love my wife and son forever</strong></p><p>Family is my powerful engine; it provides much motivation for me to move forward. God bless you.</p>]]></content>
    
    
    <categories>
      
      <category>Personal summary</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>lua-luarocks在Project中的应用</title>
    <link href="/2023/12/23/004lua/lua-luarocks%E5%9C%A8Project%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <url>/2023/12/23/004lua/lua-luarocks%E5%9C%A8Project%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p><a href="https://martin-fieber.de/blog/goodbye-snake-i-go-to-the-moon/">Reference</a></p><h2 id="Install-luarocks"><a href="#Install-luarocks" class="headerlink" title="Install luarocks"></a>Install luarocks</h2><p><strong>mission</strong>: use <code>luarocks</code> to manage third libs in lua project.</p><blockquote><p>Guarantee the <code>luarocks</code> have been installed in your mac. if not , using the follow command.</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">$ <span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>luarocks<br></code></pre></td></tr></table></figure></blockquote><p>Generally, the libs installed using <code>luarocks</code> will locate at global position. <del>But in real situation, we’d like install lib is each Project locally not in global.</del>  But in a real-world scenario, we prefer to install libs locally for each project rather than globally.</p><h2 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h2><blockquote><p>I will install all packages inside a <code>lua_modules</code> folder <u>in the root of a project</u>, using the <code>--tree</code> option of the LuaRocks CLI. As an example, installing the <a href="https://luarocks.org/modules/kikito/inspect">inspect</a> package.</p></blockquote><ol><li><p><code>cd</code> the root of your Project.</p></li><li><p>excute <code>luarocks install --tree=lua_modules inspect</code></p><p><img src="https://raw.githubusercontent.com/JackieDai/blogAssets/main/202312230851976.png"></p><blockquote><p><code>tree=lua_modules</code> means the libs will be installed at that folder.</p></blockquote></li><li><p>create <code>setup.lua</code> and <code>test.lua</code> files.</p><ol><li><p>we need make configrations for <code>pageage</code> in <code>setup.lua</code> file</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- setup.lua</span><br><span class="hljs-keyword">local</span> version = <span class="hljs-built_in">_VERSION</span>:<span class="hljs-built_in">match</span>(<span class="hljs-string">&quot;%d+%.%d+&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;version&#x27;</span>,version) <span class="hljs-comment">-- version5.4</span><br><br><span class="hljs-built_in">package</span>.<span class="hljs-built_in">path</span> = <span class="hljs-string">&#x27;lua_modules/share/lua/&#x27;</span><br>  .. version ..<br>  <span class="hljs-string">&#x27;/?.lua;lua_modules/share/lua/&#x27;</span><br>  .. version ..<br>  <span class="hljs-string">&#x27;/?/init.lua;&#x27;</span><br>  .. <span class="hljs-built_in">package</span>.<span class="hljs-built_in">path</span><br><span class="hljs-built_in">package</span>.<span class="hljs-built_in">cpath</span> = <span class="hljs-string">&#x27;lua_modules/lib/lua/&#x27;</span><br>  .. version ..<br>  <span class="hljs-string">&#x27;/?.so;&#x27;</span> .. <span class="hljs-built_in">package</span>.<span class="hljs-built_in">cpath</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;package.path == &#x27;</span>,<span class="hljs-built_in">package</span>.<span class="hljs-built_in">path</span>) <span class="hljs-comment">-- package.path ==lua_modules/share/lua/5.4/?.lua;lua_modules/share/lua/5.4/?/init.lua;/usr/local/share/lua/5.4/?.lua;/usr/local/share/lua/5.4/?/init.lua;/usr/local/lib/lua/5.4/?.lua;/usr/local/lib/lua/5.4/?/init.lua;./?.lua;./?/init.lua</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;package.cpath == &#x27;</span>,<span class="hljs-built_in">package</span>.<span class="hljs-built_in">cpath</span>) <span class="hljs-comment">-- package.cpath == lua_modules/lib/lua/5.4/?.so;/usr/local/lib/lua/5.4/?.so;/usr/local/lib/lua/5.4/loadall.so;./?.so</span><br></code></pre></td></tr></table></figure></li><li><p>test the lib in <code>test.lua</code>file</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">--[[</span><br><span class="hljs-comment">    <span class="hljs-doctag">NOTE:</span></span><br><span class="hljs-comment">    make sure setup.lua must be loaded. or `require &quot;inspect&quot;` cause error!</span><br><span class="hljs-comment">]]</span><br><br><span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;setup&quot;</span>)<br><br><span class="hljs-keyword">local</span> inspect = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;inspect&quot;</span><br><span class="hljs-keyword">local</span> a = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;<br><br><span class="hljs-built_in">print</span>(inspect(a))<br><br><span class="hljs-comment">--[[</span><br><span class="hljs-comment">result:</span><br><span class="hljs-comment">&#123; 1, 2 &#125;</span><br><span class="hljs-comment">]]</span><br></code></pre></td></tr></table></figure></li></ol></li><li><p>the demo dir as follows:</p><p><img src="https://raw.githubusercontent.com/JackieDai/blogAssets/main/202312230910092.png"></p></li></ol><blockquote><p>If you install libs locally, there is nothing when you excute <code>luarocks list</code>;</p><p><img src="https://raw.githubusercontent.com/JackieDai/blogAssets/main/202312230913600.png"></p><p><del>But if you install globally, there are the libs you installed before when excute that command.</del></p><p>But if you install globally, the libraries you installed before will be available when executing that command.</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Lua</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tools</tag>
      
      <tag>lua</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lua-优秀博客</title>
    <link href="/2023/12/23/004lua/lua-%E4%BC%98%E7%A7%80%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/12/23/004lua/lua-%E4%BC%98%E7%A7%80%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="Lua-project-setup-with-LuaRocks"><a href="#Lua-project-setup-with-LuaRocks" class="headerlink" title="Lua project setup with LuaRocks"></a>Lua project setup with LuaRocks</h2><p><a href="https://martin-fieber.de/blog/lua-project-setup-with-luarocks/">参考链接</a></p><blockquote><p>这个blog里面还有其他关于 lua 的相关介绍</p></blockquote><hr>]]></content>
    
    
    <categories>
      
      <category>Lua</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tools</tag>
      
      <tag>lua</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算markdown标题数量&amp;给markdown注入内容</title>
    <link href="/2023/12/21/003tools/001_caculate_H_count/"/>
    <url>/2023/12/21/003tools/001_caculate_H_count/</url>
    
    <content type="html"><![CDATA[<p>为了统计<code>markdown</code> 文件中的标题的数量，使用python 如下</p><blockquote><p>下面的代码有两个主要功能</p><ul><li>统计markdown文件的标题数量</li><li>给markdown文件注入<code>hexo</code>blog 标题的格式</li></ul><p>代码中的路径内容对应</p><p><img src="https://raw.githubusercontent.com/JackieDai/blogAssets/main/202312211502789.png"></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 正则匹配相关</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-comment"># 系统库</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-comment"># 日期</span><br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><span class="hljs-comment"># 时间</span><br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># 获取文件夹下的子文件夹</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">list_subdirectories</span>(<span class="hljs-params">root_dir</span>):<br>    subdirectories = [d <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> os.listdir(root_dir) <br>                      <span class="hljs-keyword">if</span> os.path.isdir(os.path.join(root_dir, d)) <br>                      <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> d.startswith(<span class="hljs-string">&#x27;.&#x27;</span>)  <span class="hljs-comment"># 排除隐藏文件夹</span><br>                      <span class="hljs-keyword">and</span> d.lower() != <span class="hljs-string">&#x27;unfamiliarwords&#x27;</span>]  <span class="hljs-comment"># 排除名为 UnfamiliarWords 的文件夹</span><br><br>    subdirectories.sort()<br>    <span class="hljs-keyword">return</span> subdirectories<br><br><span class="hljs-comment"># 获取.md 文件的文件名称</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">list_md_file</span>(<span class="hljs-params">file_path</span>):<br>    md_files = [f <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> os.listdir(file_path) <span class="hljs-keyword">if</span> f.endswith(<span class="hljs-string">&quot;.md&quot;</span>)]<br>    md_files.sort()<br>    <span class="hljs-keyword">return</span> md_files<br><br><span class="hljs-comment"># 计算md文件的标题数量</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">count_markdown_headings</span>(<span class="hljs-params">file_path</span>):<br>    <span class="hljs-comment"># 读取 Markdown 文件内容</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        content = file.read()<br><br>    <span class="hljs-comment"># 使用正则表达式匹配 Markdown 标题</span><br>    heading_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;^#+\s&#x27;</span>, re.MULTILINE)<br>    matches = heading_pattern.findall(content)<br><br>    <span class="hljs-comment"># 统计各级别标题的数量</span><br>    heading_count = &#123;&#125;<br>    <span class="hljs-keyword">for</span> <span class="hljs-keyword">match</span> <span class="hljs-keyword">in</span> matches:<br>        level = <span class="hljs-keyword">match</span>.count(<span class="hljs-string">&#x27;#&#x27;</span>)<br>        heading_count[level] = heading_count.get(level, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span><br><br>    <span class="hljs-comment"># 打印统计结果</span><br>    result = []<br>    <span class="hljs-keyword">for</span> level, count <span class="hljs-keyword">in</span> heading_count.items():<br>        <span class="hljs-comment"># print(f&#x27;Level &#123;level&#125; headings: &#123;count&#125;&#x27;)</span><br>        info_dict = &#123;<br>            <span class="hljs-string">&quot;level&quot;</span>: level,<br>            <span class="hljs-string">&quot;headings&quot;</span>: count<br>        &#125;<br>        result.append(info_dict)<br>    <span class="hljs-keyword">return</span> result<br><br><br><span class="hljs-comment"># 注入内容</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inject_content_to_markdown</span>(<span class="hljs-params">file_path, content_to_inject</span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 打开原始Markdown文件并读取内容</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>            original_content = file.read()<br><br>        <span class="hljs-comment"># 向内容开头注入新的内容</span><br>        new_content = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;content_to_inject&#125;</span>\n\n<span class="hljs-subst">&#123;original_content&#125;</span>&quot;</span><br><br>        <span class="hljs-comment"># 将修改后的内容写回Markdown文件</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>            file.write(new_content)<br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;内容已成功注入到文件：<span class="hljs-subst">&#123;file_path&#125;</span>&quot;</span>)<br><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;发生错误：<span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 注入的内容</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inject_content_func</span>(<span class="hljs-params">markdown_file_path, markdown_file_name</span>):<br><br>    time.sleep(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-comment"># 获取当前时间</span><br>    current_time = datetime.now()<br><br>    markdown_file_name = markdown_file_name.split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">0</span>]<br><br>    <span class="hljs-comment"># 格式化时间为字符串</span><br>    formatted_time = current_time.strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)<br>    <span class="hljs-comment"># 要注入的内容</span><br>    inject_content = <span class="hljs-string">f&#x27;&#x27;&#x27;---</span><br><span class="hljs-string">title: <span class="hljs-subst">&#123;markdown_file_name&#125;</span></span><br><span class="hljs-string">date: <span class="hljs-subst">&#123;formatted_time&#125;</span></span><br><span class="hljs-string">index_img: /img/richpoordad.png</span><br><span class="hljs-string">excerpt: The Part of <span class="hljs-subst">&#123;markdown_file_name&#125;</span> unfamiliar words</span><br><span class="hljs-string">tags: </span><br><span class="hljs-string">    - RichDadPoorDad</span><br><span class="hljs-string">categories: English</span><br><span class="hljs-string">---&#x27;&#x27;&#x27;</span><br>    <span class="hljs-built_in">print</span>(inject_content)<br>    inject_content_to_markdown(markdown_file_path, inject_content)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># if u want to log ecah detail of secitons, just set the boolen value True</span><br>    should_log_detail = <span class="hljs-literal">False</span><br>    <span class="hljs-comment"># 指定文件夹路径</span><br>    folder_path = <span class="hljs-string">&#x27;/Users/lingxiao/RichDadAndPoorDad&#x27;</span><br>    <span class="hljs-comment"># 获取子文件夹列表</span><br>    subdirectories = list_subdirectories(folder_path)<br><br>    total_count = <span class="hljs-number">0</span><br><br>    <span class="hljs-comment"># 输出子文件夹名称</span><br>    <span class="hljs-keyword">for</span> subdir <span class="hljs-keyword">in</span> subdirectories:<br>        <span class="hljs-comment"># print(subdir)</span><br>        folder_sub_path = folder_path + <span class="hljs-string">&quot;/&quot;</span> + subdir<br><br>        subdir_count = <span class="hljs-number">0</span><br><br>        <br>        <span class="hljs-keyword">if</span> should_log_detail:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;===========&quot;</span>*<span class="hljs-number">5</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;subdir&#125;</span> section detail as follows:&quot;</span>)<br>       <br>        md_files = list_md_file(folder_sub_path)<br><br>        <span class="hljs-comment"># 打印文件名</span><br>        <span class="hljs-keyword">for</span> md_file <span class="hljs-keyword">in</span> md_files:<br>            whole_md_address = folder_sub_path + <span class="hljs-string">&quot;/&quot;</span> + md_file<br>            <span class="hljs-comment"># 给 md 文件注入 通用脚本  !!!!!!</span><br>            inject_content_func(whole_md_address,md_file)<br><br>            <span class="hljs-comment"># 计算每一个md文件的标题个数</span><br>            result = count_markdown_headings(whole_md_address)<br>            <span class="hljs-keyword">for</span> info_dict <span class="hljs-keyword">in</span> result:<br>                <span class="hljs-keyword">if</span> info_dict[<span class="hljs-string">&quot;level&quot;</span>] == <span class="hljs-number">2</span>:<br>                    word_count = info_dict[<span class="hljs-string">&quot;headings&quot;</span>]<br>                    total_count = total_count + word_count<br>                    subdir_count = subdir_count + word_count<br>                    <span class="hljs-keyword">if</span> should_log_detail:<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\t<span class="hljs-subst">&#123;md_file&#125;</span> words count == <span class="hljs-subst">&#123;word_count&#125;</span>&#x27;</span>)<br><br>        log_str = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;subdir&#125;</span> words count == <span class="hljs-subst">&#123;subdir_count&#125;</span> \n&quot;</span><br>        <span class="hljs-keyword">if</span> should_log_detail:<br>            log_str = <span class="hljs-string">f&quot;---Total count:<span class="hljs-subst">&#123;subdir_count&#125;</span> \n&quot;</span><br>        <span class="hljs-built_in">print</span>(log_str)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;RichDadAndPoorDad 总 数 == <span class="hljs-subst">&#123;total_count&#125;</span>\n&quot;</span>)    <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tools</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日单词</title>
    <link href="/2023/12/21/002english/DailyWords/"/>
    <url>/2023/12/21/002english/DailyWords/</url>
    
    <content type="html"><![CDATA[<h2 id="Rich-Dad-Poor-Dad"><a href="#Rich-Dad-Poor-Dad" class="headerlink" title="Rich Dad Poor Dad"></a>Rich Dad Poor Dad</h2><p>Pls Click on <a href="https://www.yuque.com/jk-coder/pr14f1">RichDadPoorDad</a> for many unfamiliar words.</p><p><img src="https://raw.githubusercontent.com/JackieDai/blogAssets/main/richpoordad.png"></p>]]></content>
    
    
    <categories>
      
      <category>English</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RichDadPoorDad</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rich_Dad_Poor_Dad</title>
    <link href="/2023/12/21/002english/Rich-Dad-Poor-Dad/"/>
    <url>/2023/12/21/002english/Rich-Dad-Poor-Dad/</url>
    
    <content type="html"><![CDATA[<h2 id="Rich-Dad-Poor-Dad"><a href="#Rich-Dad-Poor-Dad" class="headerlink" title="Rich Dad Poor Dad"></a>Rich Dad Poor Dad</h2><p>Pls Click on <a href="https://www.yuque.com/jk-coder/pr14f1">RichDadPoorDad</a> for many unfamiliar words.</p><p><img src="https://raw.githubusercontent.com/JackieDai/blogAssets/main/richpoordad.png"></p>]]></content>
    
    
    <categories>
      
      <category>English</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RichDadPoorDad</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客使用说明</title>
    <link href="/2023/12/20/000firstblog/hello-world/"/>
    <url>/2023/12/20/000firstblog/hello-world/</url>
    
    <content type="html"><![CDATA[<p>测试。git status….</p><p><a href="https://hexo.fluid-dev.com/docs/guide/">博客使用说明</a></p><p>使用 <a href="https://github.com/apps/utterances">utterances</a> 作为评论系统  <a href="https://www.jianshu.com/p/785d727810b3l">参考链接</a></p><p><img src="https://raw.githubusercontent.com/JackieDai/blogAssets/main/202312201801777.png"></p><p><img src="https://raw.githubusercontent.com/JackieDai/blogAssets/main/202312201802152.png"></p><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
